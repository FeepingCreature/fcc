module ast.structfuns;

import ast.fun, ast.nestfun, ast.base, ast.structure, ast.variable,
  ast.properties, ast.pointer, ast.dg, ast.namespace, tools.base: This,
  This_fn, rmSpace;

import ast.modules;
Object gotStructFunDef(ref string text, ParseCb cont, ParseCb rest) {
  /*auto rs = fastcast!(RelNamespace)~ namespace();
  if (!rs)
    throw new Exception(Format("Fail: namespace is "[], namespace(), ". "[]));*/
  auto rs = namespace().get!(RelNamespace);
  if (!rs)
    throw new Exception(Format("Fail: no relns beneath "[], namespace(), ". "[]));
  auto fun = fastalloc!(RelFunction)(rs);
  
  if (auto res = gotGenericFunDef(fun, cast(Namespace) null, true, text, cont, rest)) {
    auto tr = fastcast!(Tree) (res);
    auto he = namespace().get!(HandlesEmits);
    if (!he || !he.handledEmit(tr))
      fastcast!(Module) (current_module()).entries ~= tr;
    return res;
  } else return null;
}
mixin DefaultParser!(gotStructFunDef, "struct_member.struct_fundef"[]);

import ast.vardecl, ast.assign;
class RelFunCall : FunCall, RelTransformable {
  Expr baseptr;
  this(Expr ex) {
    baseptr = ex;
  }
  mixin defaultIterate!(baseptr, params);
  override RelFunCall dup() {
    auto res = fastalloc!(RelFunCall)(baseptr?baseptr.dup:null);
    res.fun = fun;
    res.params = params.dup;
    foreach (ref entry; params) entry = entry.dup;
    return res;
  }
  override Object transform(Expr base) {
    // if (baseptr) { logln("RelFunCall was pretransformed: "[], baseptr, "; new base would be ", base); fail; }
    // I AM REALLY REALLY NOT SURE ABOUT THIS
    // TODO: smother in asserts
    if (baseptr) return this;
    if (!base) fail;
    auto res = dup();
    res.baseptr = base;
    return res;
  }
  override void emitAsm(AsmFile af) {
    if (!baseptr) {
      logln("Untransformed rel-funcall: "[], this);
      fail;
    }
    if (auto lv = fastcast!(LValue)~ baseptr) {
      callDg(af, fun.type.ret, params,
        fastalloc!(DgConstructExpr)(fun.getPointer(), fastalloc!(RefExpr)(lv)));
    } else {
      mkVar(af, valueType(), true, (Variable var) {
        auto backup = af.checkptStack();
        scope(exit) af.restoreCheckptStack(backup);
        auto temp = fastalloc!(Variable)(baseptr.valueType(), cast(string) null, baseptr, boffs(baseptr.valueType(), af.currentStackDepth));
        (fastalloc!(VarDecl)(temp)).emitAsm(af);
        Variable res;
        // don't process res if void
        if (var) res = fastalloc!(Variable)(valueType(), cast(string) null, boffs(valueType(), af.currentStackDepth));
        callDg(af, fun.type.ret, params,
          fastalloc!(DgConstructExpr)(fun.getPointer(), fastalloc!(RefExpr)(temp)));
        if (var) emitAssign(af, var, res);
      });
    }
  }
  override IType valueType() {
    return fun.type.ret;
  }
}

class RelExtensibleOverloadWrapper : OverloadSet, RelTransformable {
  this(string name, Function[] funs...) { super(name, funs); }
  override {
    Object transform(Expr ex) {
      foreach (ref fun; funs) {
        if (auto rt = fastcast!(RelTransformable) (fun))
          fun = fastcast!(Function) (rt.transform(ex));
      }
      return this;
    }
    Extensible extend(Extensible ex) {
      auto os = fastcast!(OverloadSet) (super.extend(ex));
      if (!os) fail;
      return fastalloc!(RelExtensibleOverloadWrapper)(os.name, os.funs);
    }
  }
}

class RelFunction : Function, RelTransformable, HasInfo {
  Expr baseptr; // unique per instance
  IType basetype; // for mangling purposes
  RelNamespace context;
  bool autogenerated; // was generated by the compiler
  private this() { }
  this(RelNamespace rn) {
    context = rn;
    basetype = fastcast!(IType)~ rn;
    assert(!!basetype);
  }
  RelFunction alloc() { return new RelFunction; }
  RelFunction dup() {
    auto res = fastcast!(RelFunction) (super.dup());
    res.context = context;
    res.baseptr = baseptr?baseptr.dup:null;
    res.basetype = basetype;
    return res;
  }
  override Object transform(Expr base) {
    assert(!baseptr, Format("RelFun was pretransformed: "[], baseptr));
    assert(!!fastcast!(RelNamespace) (basetype));
    auto res = dup();
    if (!base) fail;
    res.baseptr = base;
    return res;
  }
  override Extensible extend(Extensible e2) {
    auto res = super.extend(e2);
    if (!res) return null;
    auto os = fastcast!(OverloadSet) (res);
    if (!os || fastcast!(RelTransformable) (res)) return res;
    return fastalloc!(RelExtensibleOverloadWrapper)(os.name, os.funs);
  }
  override Extensible simplify() { return this; }
  FunctionPointer typeAsFp() {
    auto res = new FunctionPointer;
    res.ret = type.ret;
    res.args = type.params.dup;
    if (auto rnfb = fastcast!(RelNamespaceFixupBase) (context))
      res.args ~= Argument(rnfb.genCtxType(context));
    else
      res.args ~= Argument(fastalloc!(Pointer)(basetype));
    return res;
  }
  mixin defaultIterate!(baseptr, tree);
  override {
    string mangleSelf() {
      return basetype.mangle() ~ "_" ~ super.mangleSelf();
    }
    string getInfo() { return Format(name, " under "[], context); }
    string mangle(string name, IType type) {
      return mangleSelf() ~ (type?("_" ~ type.mangle()):""[])~"_"~name;
    }
    FunCall mkCall() {
      auto res = fastalloc!(RelFunCall)(baseptr);
      res.fun = this;
      return res;
    }
    import ast.aliasing;
    int fixup() {
      auto cur = super.fixup();
      if (!fastcast!(hasRefType) (context))
        logln("bad context: "[], context, " is not reftype"[]);
      
      auto bp = fastalloc!(Variable)((fastcast!(hasRefType) (context)).getRefType(), "__base_ptr"[], cur);
      add(bp);
      cur += 4;
      _framestart += 4;
      
      if (fastcast!(Pointer)~ bp.valueType())
        add(fastalloc!(LValueAlias)(fastalloc!(DerefExpr)(bp), "this"[]));
      return cur;
    }
    Object lookup(string name, bool local = false) {
      auto res = super.lookup(name, true);
      if (res) return res;
      else if (local) return null;
      
      auto bp = fastcast!(Expr) (lookup("__base_ptr"[], true));
      if (bp) { // initialized already?
        if (auto ptr = fastcast!(Pointer)~ bp.valueType()) bp = fastalloc!(DerefExpr)(bp);
        if (auto res = context.lookupRel(name, bp))
          return res;
      }
      
      return super.lookup(name, false);
    }
  }
}

// &foo.fun, stolen from ast.nestfun
class StructFunRefExpr : mkDelegate {
  RelFunction fun;
  this(RelFunction fun) {
    this.fun = fun;
    // logln("base ptr is "[], fun.baseptr);
    if (!fun.baseptr)
      fail;
    super(fun.getPointer(), fastalloc!(RefExpr)(fastcast!(CValue)~ fun.baseptr));
  }
  override typeof(this) dup() { return new typeof(this)(fun); }
  override string toString() {
    return Format("&"[], fun.baseptr, "."[], fun);
  }
  override IType valueType() {
    return fastalloc!(Delegate)(fun.type.ret, fun.type.params);
  }
}

Object gotStructfunRefExpr(ref string text, ParseCb cont, ParseCb rest) {
  string ident;
  RelFunction rf;
  auto propbackup = propcfg().withCall;
  propcfg().withCall = false;
  scope(exit) propcfg().withCall = propbackup;
  if (!rest(text, "tree.expr _tree.expr.arith"[], &rf))
    return null;
  
  return fastalloc!(StructFunRefExpr)(rf);
}
mixin DefaultParser!(gotStructfunRefExpr, "tree.expr.dg_struct_ref"[], "21010"[], "&"[]);

static this() {
  getOpCall = delegate Object(Object obj) {
    auto ex = fastcast!(Expr) (obj); if (!ex) return null;
    auto st = fastcast!(Structure) (resolveType(ex.valueType()));
    if (!st) return null;
    auto oc = st.lookupRel("opCall", ex);
    if (!oc) return null;
    return oc;
  };
}
