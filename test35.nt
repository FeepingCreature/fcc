module test35;

import c.ncurses, c.panel;
pragma(lib, "ncurses");
pragma(lib, "panel");

import std.string;

void createBox(int y, x, w, h) {
  mvaddch(y, x, ACS_ULCORNER);
  mvaddch(y, x + w, ACS_URCORNER);
  mvaddch(y + h, x, ACS_LLCORNER);
  mvaddch(y + h, x + w, ACS_LRCORNER);
  mvhline(y, x + 1, ACS_HLINE, w - 1);
  mvhline(y + h, x + 1, ACS_HLINE, w - 1);
  mvvline(y + 1, x, ACS_VLINE, h - 1);
  mvvline(y + 1, x + w, ACS_VLINE, h - 1);
}

void main() {
  writeln "$(string-of chtype)";
  writeln "$(string-of ACS_ULCORNER)";
  {
    initscr;
    start_color;
    cbreak;
    keypad(stdscr, char:true);
    noecho;
    init_pair (1, COLOR_BLACK, COLOR_CYAN);
    int height = 2, width = 30;
    int starty = (LINES - height) / 2;
    int startx = (COLS - width) / 2;
    attron(COLOR_PAIR(1));
    createBox(starty, startx, width, height);
    mvprintw(starty, startx + 3, "Hello World !!!");
    mvprintw(starty + 1, startx + 1, " Type any char to exit       ");
    mvprintw(0, 0, "");
    refresh;
    wgetch(stdscr);
    clear();
    endwin();
  }
  {
    WINDOW*x 3 my_wins;
    PANEL*x 3 my_panels;
    
    int lines = 10, cols = 40, y = 2, x = 4, i;
    
    initscr; cbreak; noecho;
    
    my_wins[0] = newwin(lines, cols, y, x);
    my_wins[1] = newwin(lines, cols, y + 1, x + 5);
    my_wins[2] = newwin(lines, cols, y + 2, x + 10);
    
    for auto win <- my_wins
      box(win, size_t:0, size_t:0);
    
    my_panels[0] = new_panel my_wins[0];
    my_panels[1] = new_panel my_wins[1];
    my_panels[2] = new_panel my_wins[2];
    update_panels;
    
    doupdate;
    
    getch;
    endwin;
  }
  /+auto ch = getch;
  if (ch == KEY_F0 + 1) printw "It's a F1! Homg. \n";
  else {
    printw toStringz "$LINES and $COLS - ";
    printw "It's a ";
    attron A_BOLD;
    "%c".printw ch;
    attroff A_BOLD;
    printw "\n";
  }
  refresh;
  getch;
  endwin;+/
}
