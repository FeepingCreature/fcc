module glsetup;

import opengl, sdl_base;

extern(C) void exit(int);

void quit(int code) {
  SDL_Quit();
  exit(code);
}

int resizeWindow(int w, int h) mode GL {
  if !h
    h = 1;
  auto ratio = w * 1.0 / h;
  Viewport(0, 0, w, h);
  MatrixMode PROJECTION;
  LoadIdentity;
  gluPerspective(45.0, ratio, 0.1, 100.0);
  MatrixMode MODELVIEW;
  LoadIdentity;
  return true;
}

int initGL() mode GL {
  ShadeModel SMOOTH;
  Enable DEPTH_TEST;
  Enable COLOR_MATERIAL;
  DepthFunc LESS; // lequal is bad for mesa
  Enable TEXTURE_2D;
  Hint (PERSPECTIVE_CORRECTION_HINT, NICEST);
  return true;
}

SDL_Surface* delegate(int, int) regenSurf;

void update(SDL_Surface* surface) {
  swap;
  using scoped onResize:: onResize = \(int w, h) { regenSurf(w, h); resizeWindow(w, h); };
  sdl_base.update;
}

void swap() { SDL_GL_SwapBuffers(); }

void delegate()[] gl-context-callbacks;

SDL_Surface* setup-gl(int extra-flags = 0) {
  SDL_Init (SDL_INIT_VIDEO);
  auto flags = SDL_OPENGL | SDL_GL_DOUBLEBUFFER | SDL_RESIZABLE;
  flags |= extra-flags;
  // SDL_GL_SetAttribute(SDL_GL_ACCELERATED_VISUAL, 1);
  regenSurf = new delegate SDL_Surface*(int w, int h) {
    writeln "regenSurf($w, $h, 0, $flags)";
    auto res = SDL_SetVideoMode (w, h, 0, flags);
    if !res quit(1);
    initGL;
    // IMPORTANT: init gl FIRST
    resizeWindow (w, h);
    for (auto dg <- gl-context-callbacks)
      dg();
    return res;
  };
  return regenSurf(640, 480);
}
