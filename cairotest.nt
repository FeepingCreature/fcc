module cairotest;

import sdl, std.math, opengl, cairo, glsetup, std.time;

pragma(lib, "cairo");

void main() {
  writeln "Open SDL Window .. ";
  gl-context-callbacks ~= delegate void() {
    glMatrixMode GL_PROJECTION; glLoadIdentity;
    glMatrixMode GL_MODELVIEW; glLoadIdentity;
    glDisable GL_DEPTH_TEST;
  };
  auto window = setup-gl(SDL_HWPALETTE | SDL_HWSURFACE | SDL_HWACCEL);
  writeln "got $window";
  resizeWindow(640, 480);
  auto backup =
    (glXGetCurrentDisplay(), glXGetCurrentDrawable(), glXGetCurrentContext());
  auto dev = cairo_glx_device_create (backup[0], backup[2]);
  glXMakeCurrent backup;
  
  writeln "create surf for $dev";
  writeln "post: $(glXGetCurrentContext()), $(glXGetCurrentDisplay())";
  auto surface = cairo_gl_surface_create_for_window
    (dev, backup[1], window.w, window.h);
  
  float f = 0;
  void draw() {
    f += 0.1;
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    mode cairo-context cairo_create surface {
      onSuccess destroy; // social commentary lol
      set_source_rgb (0, 0.1, 0.1);
      paint;
      auto p  = vec2f(25.6 , 128.0),
           p1 = vec2f(102.4, 230.4),
           p2 = vec2f(153.6, 25.6 ),
           p3 = vec2f(230.4, 128.0);
      
      move_to p;
      curve_to (p1, p2, p3);
      set_source_rgb (1.0, 1.0, 1.0);
      set_line_width 10;
      stroke;
      
      set_source_rgba (1, 0.2, 0.2, 0.6);
      set_line_width 6;
      move_to p;   line_to p1;
      move_to p2;  line_to p3;
      stroke;
      
      set_source_rgb (1, 1, 0.8);
      set_line_width 1;
      auto center = vec2f(320, 240);
      int i;
      while float it <- [for x <- 0 .. 180*4: x / 4.0] {
        auto delta = vec2f(sin(it * PI / 180) * 200, cos(it * PI / 180) * 200);
        delta *= (0.5 + 0.5 * sin (f * it * PI / 180 + f));
        move_to (center - delta);
        line_to (center + delta);
        // if ((++i) % 5 == 0) stroke;
      }
      stroke;
    }
    cairo_gl_surface_swapbuffers surface;
  }
  
  int fps, lastTime = time null;
  bool update() {
    draw();
    fps ++;
    if (time null != lastTime) {
      writeln "$fps fps";
      fps = 0; lastTime = time null;
    }
    return glsetup.update window;
  }
  while !update() { }
}
