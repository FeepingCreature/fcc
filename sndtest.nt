module sndtest;

import std.sort, std.math, std.sound, std.file, std.string;

void cfgNote(Note res, float freq, float len) {
  res.freq = freq;
  using res {
    maxVolume = 0.2;
    sustain = 0.1;
    decayStart = len * 0.05;
    sustainStart = len * 0.3;
    releaseStart = len * 0.7;
    end = len;
  }
}

void main(string[] args) {
  Sound snd;
  if (args.length && args[0] == "-oss") {
    args = args[1 .. $];
    snd = new OSSSound("/dev/dsp");
  } else
    snd = new AlsaSound("default");
  
  snd.open();
  float delegate(float) dg;
  float x 12  scale;
  for int i <- 0..12
    scale[i] = pow(pow(2, 1/12f), i);
  
  (Note, float)[] notelist;
  void addNoteAt(float start, float freq, float length, bool useSine = false) {
    // writeln "addNoteAt($start, $freq, $length)";
    (Note, float)[auto~] res;
    for int i <- 0..notelist.length res ~= notelist[i];
    Note n;
    if (useSine) n = new SineNote;
    else n = new KarplusStrongNote;
    cfgNote(n, freq, length);
    res ~= (n, start);
    notelist = res[];
  }
  void addNoteAtRef(float* pp, float freq, float len, bool useSine = false) {
    alias pos = *pp;
    addNoteAt(pos, freq, len, useSine);
    pos += len;
  }
  void clearList(float pos) {
    (Note, float)[auto~] res;
    for int i <- 0..notelist.length {
      alias n = notelist[i];
      if pos < (n[1] + n[0].end) res ~= n;
    }
    notelist = res[];
  }
  void sortList() { qsort(\((Note, float) a, b) -> a[1] < b[1], notelist); }
  void addTrack(string notes) {
    float baseFreq = 220;
    float len = 0.3705;
    int octaves; // int so it doesn't get fucked up by repeated mul/div
    float lenf = 1;
    float offs = 0;
    alias state = (baseFreq, len, lenf, offs);
    type-of state[] stack;
    char lastChar; bool lastSharp;
    bool useSine;
    while notes.length {
      if auto rest = notes.startsWith "len=" {
        (string lenstr, notes) = rest.slice ";";
        len = lenstr.atof();
      }
      if auto rest = notes.startsWith "in=" {
        (string instr, notes) = rest.slice ";";
        useSine = eval instr == "sine";
      }
      (char cur, notes) = notes[(0, 1..$)];
      bool sharp;
      if notes.length && notes[0] == "#" {
        sharp = true;
      }
      if cur == "."[0] { lenf *= 0.5; }
      else {
        auto l = len * (2 - lenf);
        void handleChar(char ch) {
          for auto tup <- [("c", 0), ("d", 2), ("e", 4), ("f", 5), ("g", 7), ("a", 9), ("b", 10), ("h", 11)]
            if ch == tup[0][0] addNoteAtRef(&offs, baseFreq * scale[(tup[1] + sharp)%$], l, useSine);
          if      ch == "_" offs += l;
          else if ch == ">" octaves ++;
          else if ch == "<" octaves --;
          else if ch == "+" len *= 2;
          else if ch == "-" len /= 2;
          else if ch == "[" stack ~= (baseFreq, len, lenf, offs);
          else if ch == "]" stack = stack[0 .. $-1];
          else if ch == "," (baseFreq, len, lenf, offs) = stack[$-1];
        }
        if (cur >= "0" && cur <= "9") {
          int num = cur - "0";
          while notes.length && notes[0] >= "0" && notes[0] <= "9" {
            num = num * 10 + (notes[0] - "0");
            notes = notes[1 .. $];
          }
          for 0..(num - 1) {
            sharp = lastSharp;
            handleChar lastChar;
            sharp = false;
          }
        } else handleChar cur;
        lastChar = cur; lastSharp = sharp;
        lenf = 1;
        baseFreq = 220 * pow(2, octaves);
      }
      if sharp notes = notes[1 .. $];
    }
  }
  // addTrack "<a>e<h>ec-de+dg-aeh>c<h->c<h+agegde+.c<-h+ a>e<h>ec-de+dg-aeh>c<h->c<h+ag++a";
  // addTrack "<+fgaefgaefgaefg+a";
  string str = "-efef+ga-efef+ga-cdcd+ef-cdcd+fe", st2;
  for 0..8 st2 ~= str;
  st2 ~= "-c8d8<b8f4e4>c8d8<b8++fg--b8>c8<a8>d4c4<b8>c8<a8>d4c4<b14__+>";
  for 0..2 st2 ~= str;
  st2 ~= "-_>[f16,c16]  [d16,<a16>][f16,c16]  [d14__,<a14__>]<+";
  st2 ~= "- <[f16,>c16<][d16,a16]  [f16,>c16<][d15,a15]+>";
  for 0..2 st2 ~= str;
  st2 ~= "-<b8>c8<a8>d4c4<b8>c8<a8>d4c4<b14__+>";
  void addMidiTrack(string fn) using fn.readAll() {
    void step(int i) {
      that = that[i .. $];
    }
    short getShort() { onSuccess step 2; return short:$ _0 << 8 + _1; }
    if (that[0..4] != "MThd")
      raise new Error "Not a midi file: invalid header code: $(that[0..4])";
    step 8;
    auto fileFmt = getShort;
    if fileFmt != 0 && fileFmt != 1
      raise new Error "Can only parse mode-0 or mode-1 files, not $fileFmt. ";
    writeln "Format $fileFmt";
    auto tracks = getShort;
    writeln "$tracks tracks.";
    auto tickrate = getShort;
    writeln "tick rate $tickrate";
    int track_id;
    string info;
    while length {
      if (that[0..4] != "MTrk")
        raise new Error "Not a midi track: invalid track code: $(that[0..4])";
      step 4;
      int trklen = _0 << 24 + _1 << 16 + _2 << 8 + _3; step 4;
      writeln "$track_id: $trklen b";
      track_id ++;
      auto track = that[0 .. trklen]; step trklen;
      byte[] takeTrack(int i) {
	(byte[] res, track) = track[(0..i, i..$)];
	return res;
      }
      int pos;
      int x 128  pressedOn;
      byte lastCmd;
      float speedfactor = 0.5;
      while track.length > 0 {
        int readVarLen() {
          int res;
          while track[0] >= 0x80 {
            res = res * 128 + track[0] & 0x7f;
            track = track[1 .. $];
          }
          res = res * 128 + track[0];
          track = track[1 .. $];
          return res;
        }
        int delta = readVarLen();
        /*if (delta < 1024)*/ pos += delta;
        byte cmd;
        if (track[0] & 0x80) {
          cmd = takeTrack(1)[0];
          lastCmd = cmd;
        } else cmd = lastCmd;
        if (cmd == 0xff) {
          byte subcmd = takeTrack(1)[0];
          int len = readVarLen();
          byte[] subdata = takeTrack(len);
          // writeln "@$pos: SPECIAL $subcmd, $(subdata.length)";
          if (subcmd == 81) {
            int spd = subdata[0] << 16 + subdata[1] << 8 + subdata[2];
            writeln "speed = $spd";
            speedfactor = spd / 1000000f;
          }
          if (subcmd == 3) {
            writeln "'$(string:subdata)'";
            info = string:subdata;
          }
        } else {
          auto cmdcode = (cmd & 0xf0) >> 4, channel = cmd & 0x0f;
          if (cmdcode == 0x9 && track[1]) {
            // writeln "@$pos: NOTE ON  $(track[0])";
            auto note = takeTrack(2)[0];
            pressedOn[note] = pos;
          } else if (cmdcode == 0x8 || cmdcode == 0x9 && !track[1]) {
            // writeln "@$pos: NOTE OFF $(track[0])";
            auto note = takeTrack(2)[0];
            auto from = pressedOn[note];
            auto len = pos - from;
            auto quarters = len * speedfactor / tickrate;
            quarters *= 1.5;
            if (len > 1)
              addNoteAt(from * speedfactor / tickrate, 8 * pow(pow(2, 1/12f), note), quarters,
                eval info == "Recorder" || info == "Pan flute" || info == "Horns" || info == "Trombone" || info.find("String") != -1);
          } else if (cmdcode == 0xa) { // aftertouch, whev
            takeTrack(2);
          } else if (cmdcode == 0xb) {
            takeTrack(2);
          } else if (cmdcode == 0xc) {
            takeTrack(1);
          } else if (cmdcode == 0xe) {
            takeTrack(2); // pitch change, ignored
          } else {
            writeln "@$pos: $cmd - $cmdcode on $channel";
            writeln "left: $(track.length), $track";
            track = null;
          }
        }
      }
    }
    //writeln "$that";
  }
  if args.length {
    for auto arg <- args {
      if arg.endsWith(".mid")
        addMidiTrack arg;
      else
        addTrack arg;
    }
  } else addTrack st2;
  sortList();
  writeln "added $(notelist.length) notes";
  int lastDoneAt; bool lastHadNotes;
  dg = delegate float(float f) {
    float res = 0f;
    bool done, hadNotes;
    int i, active, doneAt;
    while !done && i < notelist.length {
      alias n = notelist[i];
      if (f >= n[1]) {
        if f < n[1] + n[0].end { res += n[0].calcValue (f - n[1]); active ++; hadNotes = true; }
      } else {
        done = true;
        doneAt = i;
      }
      i++;
    }
    if (doneAt != lastDoneAt || hadNotes != lastHadNotes) {
      auto prev = notelist.length;
      clearList f;
      lastDoneAt = doneAt;
    }
    lastHadNotes = hadNotes;
    res = atan(res) / (PI / 2);
    return res;
  };
  int base;
  float volume = 1;
  int length = 1024;
  while notelist.length {
    snd.dump(delegate Sample(int i) {
      auto res = Sample:short:int:(dg((base + i) / 48000f) * 32767f * volume);
      return res;
    }, length, 1f);
    base += length;
  }
  snd.close();
}
