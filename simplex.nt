module simplex;

import std.math;

int[] perm, mperm; // perm mod 12
vec3i x 12 grad3;

bool setupPerm;

float dot2(int x 4 whee, float a, float b) {
  return whee[0] * a + whee[1] * b;
}

class KISS {
  int x, y, z, w, carry, k, m;
  void init() { (x, y, z, w, carry) = (1, 2, 4, 8, 0); }
  void seed(int i) {
    (x, y, z, w) = (i | 1, i | 2, i | 4, i | 8);
    carry = 0;
  }
  int rand() {
    x = x * 69069 + 1;
    y xor= y << 13;
    y xor= y >> 17;
    y xor= y << 5;
    k = (z >> 2) + (w >> 3) + (carry >> 2);
    m = w + w + z + carry;
    z = w;
    w = m;
    carry = k >> 30;
    return x + y + w;
  }
}

vec3i x 2[] offsets;

void permsetup() {
  setupPerm = true;
  (perm, mperm) = (new int[] 256) x 2;
  int seed = 34;
  auto gen = new KISS;
  gen.seed(seed);
  int x 256 firstPerm;
  auto newperms = [162, 43, 153, 52, 83, 210, 193, 75, 227, 195, 233, 76, 83, 48, 252, 181, 101, 31, 13, 32, 38, 23, 72, 101, 100, 145, 105, 218, 135, 89, 39, 100, 162, 196, 51, 18, 185, 138, 76, 83, 228, 229, 128, 101, 76, 111, 68, 227, 114, 123, 72, 98, 219, 161, 8, 86, 212, 50, 219, 166, 139, 195, 195, 128, 74, 250, 154, 110, 150, 175, 36, 25, 96, 123, 101, 12, 236, 158, 227, 199, 77, 156, 6, 159, 203, 92, 27, 60, 155, 218, 239, 156, 184, 90, 213, 115, 38, 18, 39, 102, 191, 87, 177, 47, 64, 28, 224, 252, 176, 9, 111, 208, 112, 50, 78, 123, 243, 248, 99, 112, 52, 142, 253, 93, 30, 111, 56, 104, 217, 3, 204, 188, 144, 143, 155, 228, 55, 249, 45, 9, 152, 26, 250, 2, 135, 30, 4, 169, 30, 208, 56, 255, 15, 123, 237, 170, 17, 71, 182, 203, 246, 162, 184, 164, 103, 77, 49, 174, 186, 159, 201, 216, 41, 92, 246, 158, 112, 79, 99, 101, 231, 46, 88, 81, 94, 23, 24, 103, 43, 224, 151, 173, 217, 142, 64, 78, 203, 110, 151, 49, 22, 107, 3, 44, 110, 151, 253, 142, 125, 247, 3, 239, 42, 23, 238, 102, 114, 104, 58, 227, 164, 31, 214, 84, 98, 159, 67, 181, 19, 144, 133, 213, 19, 122, 245, 42, 217, 205, 0, 87, 104, 122, 35, 238, 96, 93, 116, 177, 56, 201, 147, 156, 229, 219, 16, 128];
  for int i <- 0..256 {
    // insufficient. there is something special about the C version's numbers. todo: discover what.
    // perm[i] = (gen.rand() & 0x7fff_ffff) % 256;
    perm[i] = newperms[i];
    mperm[i] = perm[i] % 12;
  }
  int i;
  alias values = [1, 1, 0,
                 -1, 1, 0,
                  1,-1, 0,
                 -1,-1, 0,
                 
                  1, 0, 1,
                 -1, 0, 1,
                  1, 0,-1,
                 -1, 0,-1,
                 
                  0, 1, 1,
                  0,-1, 1,
                  0, 1,-1,
                  0,-1,-1];
  while ((int k, int l), int idx) <- zip (cross (0..12, 0..3), ints) {
    grad3[k][l] = values[idx];
  }
  offsets = new vec3i x 2[] 8;
  offsets[0] = [vec3i.X, vec3i(1, 1, 0)];
  offsets[1] = [vec3i.Y, vec3i(1, 1, 0)];
  offsets[3] = [vec3i.Y, vec3i(0, 1, 1)];
  offsets[4] = [vec3i.X, vec3i(1, 0, 1)];
  offsets[6] = [vec3i.Z, vec3i(1, 0, 1)];
  offsets[7] = [vec3i.Z, vec3i(0, 1, 1)];
}

float noise2(vec2f f) {
  if !setupPerm permsetup;
  alias sqrt3 = sqrt float:3;
  alias f2 = 0.5 * (sqrt3 - 1);
  alias g2 = (3 - sqrt3) / 6;
  float x 3  n = void;
  
  float s = (f.x + f.y) * f2;
  int i = fastfloor(f.x + s), j = fastfloor(f.y + s);
  
  float t = (i + j) * g2;
  vec2f x 3  xy;
  xy[0] = f - (vec2i(i,j) - vec2f(t));
  
  int i1, j1;
  if xy[0].x > xy[0].y i1 = 1;
  else j1 = 1;
  
  {
    auto temp = 1 - 2 * g2;
    xy[1] = xy[0] - vec2i(i1, j1) + vec2f (g2);
    xy[2] = xy[0] - vec2f(temp);
  }
  int ii = i & 255, jj = j & 255;
  
  int x 3  gi = void;
  // gi[0] = mperm[(ii      + perm[jj     ]) & 255];
  // gi[1] = mperm[(ii + i1 + perm[jj + j1]) & 255];
  // gi[2] = mperm[(ii +  1 + perm[jj +  1]) & 255];
  gi[0] = mperm[jj * 256 + ii];
  gi[1] = mperm[(jj + j1) * 256 + (ii + i1)];
  gi[2] = mperm[(jj + 1) * 256 + (ii + 1)];
  
  for (int k = 0; k < 3; ++k) {
    float ft = 0.5 - xy[k].x*xy[k].x - xy[k].y*xy[k].y;
    if ft < 0 n[k] = 0;
    else {
      ft = ft * ft;
      n[k] = ft * ft * dot2(grad3[gi[k]], xy[k]);
    }
  }
  return 0.5 + 35 * (n[0] + n[1] + n[2]);
}

double sumval;
int count;

void time-it(string t, void delegate() dg) {
  // calibrate
  long from1, to1, from2, to2;
  from1 = rdtsc;
  (delegate void() { }) ();
  to1 = rdtsc;
  // measure
  from2 = rdtsc;
  dg();
  to2 = rdtsc;
  auto delta = (to2 - from2) - (to1 - from1);
  if !count sumval = 0;
  sumval += double:delta; count += 1;
  writeln "$t: $delta, average $(sumval / count)";
}

void testAlign(string name, void* p) {
  if !(int:p & 0b1111) writeln "$name: 16-aligned";
  else if !(int:p & 0b111) writeln "$name: 8-aligned";
  else if !(int:p & 0b11) writeln "$name: 4-aligned";
  else writeln "$name: not aligned";
}

struct NoiseContext {
  int x 4 x 2 x 8 offsets;
  byte* perm, mperm; // perm mod 12
}

bool setupNoiseContext;
NoiseContext nc;

void configNoiseContext(NoiseContext* nc, int delegate() rng) {
  auto array = [
    [[1, 0, 0, 0], [1, 1, 0, 0]],
    [[0, 1, 0, 0], [1, 1, 0, 0]],
    [[0, 0, 0, 0], [0, 0, 0, 0]],
    [[0, 1, 0, 0], [0, 1, 1, 0]],
    [[1, 0, 0, 0], [1, 0, 1, 0]],
    [[0, 0, 0, 0], [0, 0, 0, 0]],
    [[0, 0, 1, 0], [1, 0, 1, 0]],
    [[0, 0, 1, 0], [0, 1, 1, 0]]
  ];
  for auto tup1 <- zip(ints, array) {
    for auto tup2 <- zip(ints, tup1[1]) {
      for auto tup3 <- zip(ints, tup2[1]) {
        nc.offsets[tup1[0]][tup2[0]][tup3[0]] = tup3[1];
      }
    }
  }
  nc.perm = new byte[] 256 #.ptr;
  nc.mperm = new byte[] 256 #.ptr;
  for int i <- 0..256 {
    nc.perm[i] = byte:rng();
    nc.mperm[i] = byte:(nc.perm[i] % 12);
  }
}

/*float noise3(float x, y, z, NoiseContext* nc = NoiseContext*: null) {
  if !setupPerm permsetup;
  if (!nc) {
    if (!setupNoiseContext) {
      setupNoiseContext = true;
      int i;
      configNoiseContext(&.nc, delegate int() { return perm[i++]; });
    }
    nc = &.nc;
  }
  return noise3_alt(x, y, z, nc);
}*/

import std.random.base;

class SimplexNoise {
  NoiseContext nc;
  void init(IRandom ir) {
    configNoiseContext(&nc, &ir.rand);
  }
  void init(int delegate() rng) {
    configNoiseContext(&nc, rng);
  }
  float eval(float x, y, z) {
    // return noise3_asm(x, y, z, &nc);
    return noise3(vec3f(x, y, z));
  }
}

float noise3(vec3f v) {
  vec3f x 4  vs = void;
  vec3f vsum = void;
  int x 4  gi = void;
  int mask = void;
  vec3f v0 = void;
  if !setupPerm permsetup;
  
  vsum = v + (v.sum / 3.0f);
  vec3i indices;
  fastfloor3f(vsum, &indices);
  vs[0] = v - indices      + vec3f(indices.sum / 6.0f);
  auto xmm6 = vec4f:vs[0];
  vs[1] = xmm6 + vec4f(1.0f / 6);
  vs[2] = xmm6 + vec4f(2.0f / 6);
  vs[3] = xmm6 + vec4f(-1 + 3.0f / 6);
  vec4f xmm4 = xmm6.xxy;
  vec4f xmm5 = xmm6.yzz;
  // this is correct, I worked it out
  // mask = [0b100_110, 0b010_110, 0, 0b010_011, 0b100_101, 0, 0b001_101, 0b001_011][(eval xmm[4] < xmm[5]) & 0b0111];
  auto opp = &offsets[(eval xmm4 < xmm5) & 0b0111];
  alias op = *opp;
  alias offs1 = op[0];
  alias offs2 = op[1];
  vs[1] -= vec3f(offs1);
  vs[2] -= vec3f(offs2);
  auto ii = indices.x, jj = indices.y, kk = indices.z;
  alias i1 = offs1.x, i2 = offs2.x,
        j1 = offs1.y, j2 = offs2.y,
        k1 = offs1.z, k2 = offs2.z;
  {
    auto lperm = perm.ptr;
    auto mperm = mperm.ptr;
    gi[0] = mperm[(lperm[(lperm[(kk   )&0xff]+jj   )&0xff]+ii   )&0xff];
    gi[1] = mperm[(lperm[(lperm[(kk+k1)&0xff]+jj+j1)&0xff]+ii+i1)&0xff];
    gi[2] = mperm[(lperm[(lperm[(kk+k2)&0xff]+jj+j2)&0xff]+ii+i2)&0xff];
    gi[3] = mperm[(lperm[(lperm[(kk+1 )&0xff]+jj+1 )&0xff]+ii+1 )&0xff];
  }
  vec3f current = void;
  vec4f factors = void, res = void;
  auto pair = [1f, -1f, -1f];
  while (int c <- 0..4) {
    auto vscp = &vs[c];
    alias vsc = *vscp;
    current = vsc;
    current *= current;
    factors[c] = 0.6f - current.sum;
    if (factors[c] >= 0) {
      auto id = gi[c];
      res[c] = (vsc[id >> 3] * pair[id&1]) + (vsc[((id >> 2) | (id >> 3)) & 1 + 1] * pair[id&2]);
    } else {
      factors[c] = 0;
      res[c] = 0;
    }
  }
  xmm4 = factors;
  xmm4 *= xmm4;
  xmm4 *= xmm4;
  res *= xmm4;
  return 0.5f + 16.0f*res.sum;
}
