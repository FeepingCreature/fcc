module gtk;

pragma(pkg-config, "gtk+-2.0");

public import c.gtk.gtk;

import std.string;

alias gtcic = g_type_check_instance_cast;

defmode GTK_OBJECT "gobject-helper";
defmode GTK_WIDGET "gobject-helper <GTK_OBJECT>";
defmode GTK_CONTAINER "gobject-helper <GTK_WIDGET>";
defmode GTK_BIN "gobject-helper <GTK_CONTAINER>";
defmode GTK_WINDOW "gobject-helper <GTK_BIN>";
defmode GTK_BUTTON "gobject-helper <GTK_BIN>";
defmode GTK_BOX "gobject-helper <GTK_CONTAINER>";
defmode GTK_SCROLLED_WINDOW "gobject-helper <GTK_BIN>";
defmode GTK_TREE_VIEW "gobject-helper";
defmode GTK_TREE_MODEL "gobject-helper";
defmode GTK_TREE_STORE "gobject-helper";
defmode GTK_ENTRY "gobject-helper <GTK_WIDGET>";
defmode GTK_CELL_RENDERER "gobject-helper <GTK_OBJECT>";
defmode GTK_CELL_RENDERER_TEXT "gobject-helper <GTK_CELL_RENDERER>";

(void*, void*, void*)[~] store;

template call-dg-esi(T) {
  ReturnType T call-dg-esi (ParamTypes T p, void* data) {
    alias ret = ReturnType T;
    auto tup = *(ret delegate(ParamTypes T), void*)*: data;
    auto backup_esi = _esi;
    _esi = tup[1];
    static if types-equal(ret, void) {
      tup[0] p;
      _esi = backup_esi;
      return;
    } else {
      auto res = tup[0] p;
      _esi = backup_esi;
      return res;
    }
  }
}

template g_signal_connect(T) {
  // void g_signal_connect (GtkObject* w, string s, void delegate(GtkObject*) dg) {
  void g_signal_connect (T t) {
    store ~= (void*, void*, void*): (t[2], _esi);
    auto dgvalue = &(call-dg-esi!type-of t[2]);
    g_signal_connect_data (gpointer: t[0], toStringz t[1], GCallback: dgvalue, &store[$-1], null, 0);
  }
}
