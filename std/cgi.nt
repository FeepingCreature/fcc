module std.cgi;

string getEnvVar(string name) {
  import c.stdlib, std.string;
  return CToString c.stdlib.getenv toStringz name;
}

alias QUERY_STRING = getEnvVar "QUERY_STRING";

string urldecode(string st) {
  char take() {
    (char res, st) = st[(0, 1..$)];
    return res;
  }
  char[auto~] res;
  while (st.length) {
    int hexdecode(char c) {
      if (c >= "A" && c <= "F") return c - "A" + 10;
      if (c >= "a" && c <= "f") return c - "a" + 10;
      if (c >= "0" && c <= "9") return c - "0";
      raise new Error "Invalid hex char: $c";
    }
    auto ch = take();
    if (ch == "%") {
      auto ch1 = hexdecode take(), ch2 = hexdecode take();
      int chcode = ch1 * 16 + ch2;
      res ~= *char*:&chcode;
    } else if (ch == "+") {
      res ~= " ";
    } else {
      res ~= ch;
    }
  }
  return res[];
}

void delegate(string) outputfn;

struct AutoCall {
  void delegate() dg;
  alias implicit-cast = dg;
  alias onDiscard = dg();
}

template tag(alias Tagname) {
  alias open = "<" ~ Tagname ~ ">";
  alias close = "</" ~ Tagname ~ ">";
  alias fstuff = `
    auto f = outputfn;
    if (!f) { f = \(string s) printf("%.*s", s); }
  `;
  struct tagstruct {
    char[auto~] attr_appender;
    alias attr = attr_appender[];
    auto tag(void delegate() dg) {
      auto t = this;
      return AutoCall: new \{
        mixin fstuff;
        static if (Tagname == "text") {
          if (t.attr) raise new Error "text cannot have attributes: $(t.attr)";
          dg();
        } else {
          if (t.attr) { f $ "<" ~ Tagname; f t.attr; f ">"; }
          else f open;
          dg();
          f close;
        }
      }
    }
    // in theory we could select the ones appropriate for each tag
    // TODO: develop a DSL for this
    tagstruct attribute(string name, string s) {
      auto t = this;
      scope s2 = s.replace("\"", "&quot;");
      t.attr_appender ~= scope = " $name=\"$s2\"";
      return t;
    }
    tagstruct style(string s) return attribute("style", s);
    tagstruct class(string s) return attribute("class", s);
    tagstruct id(string s) return attribute("id", s);
    tagstruct href(string s) return attribute("href(", s);
    tagstruct src(string s) return attribute("src", s);
    tagstruct alt(string s) return attribute("alt", s);
    tagstruct width(int i) return attribute("width", "$i");
    tagstruct height(int i) return attribute("height", "$i");
    tagstruct size(int i) return attribute("size", "$i");
    tagstruct colspan(int i) return attribute("colspan", "$i");
    tagstruct frameborder(int i) return attribute("frameborder", "$i");
    
    tagstruct type(string s) return attribute("type", s);
    tagstruct name(string s) return attribute("name", s);
    tagstruct value(string s) return attribute("value", s);
    
    tagstruct action(string s) return attribute("action", s);
    tagstruct method(string s) return attribute("method", s);
    
    tagstruct onclick(string s) return attribute("onclick", s);
    tagstruct scrolling(string s) return attribute("scrolling", s);
    
    auto tag(string s) return tag new \{ mixin fstuff; f s; }
    auto tag() {
      auto t = this;
      return AutoCall: new \{
        mixin fstuff;
        static if (Tagname == "text") {
          if (t.attr) raise new Error "text cannot have attributes: $(t.attr)";
          else raise new Error "text cannot be evaluated on its own";
        } else {
          if (t.attr) { f $ "<"~Tagname; f t.attr; f "/>"; }
          else f $ "<"~Tagname~"/>";
        }
      }
    }
    alias implicit-cast = tag();
    alias onDiscard = tag()();
    alias opCall = tag; // todo
  }
  shared tagstruct t;
  alias tag = t;
}

void call(void delegate() dg) dg();

template _mkalias(alias A) {
  alias Tup = A[0], Idx = A[1], Val = Tup[Idx];
  alias src = "alias raw "~Val~" = tag!\""~Val~"\"; ";
  static if (Idx < Tup.length - 1) {
    alias _mkalias = src ~ _mkalias!(Tup, Idx + 1);
  } else {
    alias _mkalias = src;
  }
}

template mkalias(alias A) {
  alias mkalias = _mkalias!(A, 0);
}

mixin mkalias!(
  "html", "head", "title", "body", "p", "a",
  "div", "span", "iframe",
  "h1", "h2", "h3", "h4", "h5", "br", "b", "i", "u",
  "emph", "small",
  "ul", "li", "img", "text",
  "table", "tr", "th", "td",
  "form", "input");
