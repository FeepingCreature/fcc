module std.lib.opengl.window;

class WindowClosed : Error {
  void init(string s) super.init "WindowClose: $s";
}

import std.callset;

// NOTE: uses the USB HID standard key codes
// see: http://www.usb.org/developers/devclass_docs/Hut1_11.pdf
// pages 53 - 59
enum Key {
  Reserved, ErrorRollOver, POSTFail, ErrorUndefined,
  A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,
  Num1,Num2,Num3,Num4,Num5,Num6,Num7,Num8,Num9,Num0,
  Return,Esc,Backspace,Tab,Space,Dash,Equals,
  F1=58,F2,F3,F4,F5,F6,F7,F8,F9,F10,F11,F12,
  Insert=73,Home,PageUp,Delete,End,PageDown,
  RightArrow=79,LeftArrow,DownArrow,UpArrow,
  LeftControl=224,LeftShift=225,RightControl=228,RightShift=229
}

abstract class GLWindow {
  void delegate()[] context-callbacks;
  void addCallback(void delegate() dg) {
    context-callbacks ~= dg;
    if (isSetUp()) dg();
  }
  void init() {
    mouse-pos = vec2i(-1, -1);
  }
  void setup(vec2i size = vec2i(640, 480));
  bool isSetUp();
  vec2i size();
  void claim-cursor();
  void release-cursor();
  bool cursor-claimed();
  void warp(vec2i);
  void read-mouse-motion(void delegate(float, float) dg) {
    auto idelta = mouse-pos - size() / 2;
    auto delta = vec2f((0.001 * idelta).(x, y));
    dg delta.(x, y);
    if idelta.x || idelta.y
      warp $ size() / 2;
  }
  void update();
  struct Button {
    bool pressed, clicked, released;
  }
  Button x 5 buttons;
  vec2i mouse-pos;
  vec2i scroll-state;
  bool[] key-held, key-pressed, key-released;
  CallSet!string onTextInput;
}

GLWindow glwindow;
