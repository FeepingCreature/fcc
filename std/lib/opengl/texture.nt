module std.lib.opengl.texture;

import std.lib.opengl.(,window);

enum TexMode { MipMapped, Linear, Nearest }

void fast_vec4f_to_ints(vec4f[] vecs, int[] ints) {
  for (int i = 0; i < vecs.length; ++i) {
    ref v = vecs[i];
    ref res = ints[i];
    auto mul = v * vec4f(255);
    vec4i iv = vec4i(int:mul.x, int:mul.y, int:mul.z, int:mul.w);
    res = iv.x | iv.y << 8 | iv.z << 16 | iv.w << 24;
  }
}

class Texture : FastITexture {
  int width, height;
  alias size = vec2i(width, height);
  vec4f[] data;
  ubyte[] translated_data;
  TexMode mode;
  GLuint format;
  void init() { format = GL_RGBA; mode = TexMode.MipMapped; register; }
  void init(int w, h, vec4f[] data) { init(); this.(width,height,data) = (w,h,data); }
  void init(int w, h, vec3f[] data) this.init(w, h, vec4f[]: data);
  void init(int w, h, vec4f delegate(float, float) dg) {
    vec4f[auto~] data;
    float xf = 1f / w, yf = 1f / h;
    for int y <- 0..h for int x <- 0..w {
      float fx = (x + 0.5f) * xf;
      float fy = (y + 0.5f) * yf;
      data ~= dg(fx, fy);
    }
    init(w, h, data[]);
    upload;
    cleanup;
  }
  void init(int w, h, vec3f delegate(float, float) dg) {
    init(w, h, \(float u,v) { return vec4f(dg(u,v).(x,y,z,1)); });
  }
  GLuint id;
  override GLuint getUnderlyingTexID() return id;
  int registerId;
  void register() {
    registerId = glwindow.addCallback &upload;
  }
  void free() {
    cleanup();
    if (id) using mode GL {
      DeleteTextures(1, &id);
      id = 0;
    }
    glwindow.removeCallback registerId;
    super.free();
  }
  void cleanup() {
    if (data) data.free;
    if (translated_data) translated_data.free;
  }
  void bind() using mode GL {
    if (fastgl.fast) {
      if (id == fastgl.texid) return;
      fastgl.set-texid id;
    }
    TEXTURE_2D.BindTexture id;
  }
  void upload() using mode GL {
    if (!id) GenTextures(1, &id);
    bind;
    using TEXTURE_2D {
      bool allocated_translation; // only free translated_data that we actually allocated ourselves
      if (!translated_data) {
        auto data = new int[] this.data.length;
        fast_vec4f_to_ints(this.data, data);
        translated_data = ubyte[]: data;
        allocated_translation = true;
        if (!this.data) translated_data = null;
      }
      onExit if allocated_translation translated_data.free;
      
      auto param2 = LINEAR;
      if (mode == TexMode.Nearest) param2 = NEAREST;
      
      alias tup = (format, UNSIGNED_BYTE, void*:translated_data.ptr);
      
      int intform;
      if (format == RGBA) intform = 4;
      else intform = format;
      
      if (mode == TexMode.MipMapped) {
        gluBuild2DMipmaps (intform, size, tup);
        TEXTURE_MIN_FILTER.TexParameteri LINEAR_MIPMAP_LINEAR;
      } else {
        TexParameteri (TEXTURE_MAX_LEVEL, 0); 
        TexImage2D (0, intform, size, 0, tup);
        TEXTURE_MIN_FILTER.TexParameteri param2;
      }
      TEXTURE_MAG_FILTER.TexParameteri param2;
    }
  }
  void coord(vec2f v) {
    if (fastgl.fast) fastgl.texcoords ~= v;
    else glTexCoord2f v;
  }
  vec2i getSize() { return vec2i(width, height); }
}

class SubTexture : ITexture {
  ITexture sup;
  vec2i from, size;
  string toString() return "SubTexture($sup, $from +$size)";
  vec2f sizediv, fromdiv;
  bool supzero;
  void init(ITexture sup, vec2i from, size) {
    // TODO combine subtextures
    this.sup = sup;
    this.from = from;
    this.size = size;
    predivide;
  }
  void predivide() {
    auto supsz = sup.getSize();
    supzero = false;
    if (supsz.(x == 0 || y == 0)) {
      supzero = true;
      return;
    }
    sizediv = size / vec2f supsz;
    fromdiv = from / vec2f supsz;
  }
  void register() fail;
  void bind() sup.bind;
  void upload() fail;
  void coord(vec2f v) {
    vec2f v2;
    if (supzero) v2 = vec2f 0;
    else v2 = fromdiv + $ sizediv * v;
    sup.coord v2;
  }
  vec2i getSize() { return size; }
  void overwrite(vec4f[] data) {
    if (data.length != size.(x*y)) fail "Bad data length for overwriting $this ($(data.length))";
    using mode GL {
      gl-check;
      sup.bind;
      gl-check;
      if (auto tex = Texture: sup) {
        TEXTURE_2D.GetTexLevelParameteriv(0, TEXTURE_WIDTH, &int w);
        gl-check;
      }
      TEXTURE_2D.TexSubImage2D(0, from, size, RGBA, FLOAT, data.ptr);
      gl-check;
    }
  }
}

SubTexture init_SubTexture(ITexture sup, vec2i from, size) {
  alias tup = (sup, from, size);
  if (auto fite = FastITexture:sup) {
    return new class : SubTexture, FastITexture {
      override GLuint getUnderlyingTexID() return (FastITexture:sup).getUnderlyingTexID();
    } tup;
  }
  return new SubTexture tup;
}
