module std.lib.opengl.sdl;

import std.lib.(opengl, opengl.window, sdl_base);

extern(C) void exit(int);

void quit(int code) {
  SDL_Quit();
  exit(code);
}

int resizeWindow(int w, int h) using mode GL {
  if !h
    h = 1;
  auto ratio = w * 1.0 / h;
  Viewport(0, 0, w, h);
  MatrixMode PROJECTION;
  LoadIdentity;
  gluPerspective(45.0, ratio, 0.1, 100.0);
  MatrixMode MODELVIEW;
  LoadIdentity;
  return true;
}

int initGL() using mode GL {
  ShadeModel SMOOTH;
  Enable DEPTH_TEST;
  Enable COLOR_MATERIAL;
  DepthFunc LESS; // lequal is bad for mesa
  Enable TEXTURE_2D;
  PERSPECTIVE_CORRECTION_HINT.Hint NICEST;
  return true;
}

SDL_Surface* delegate(int, int) regenSurf;

void update(SDL_Surface* surface) {
  swap;
  using scoped onResize:: onResize = \(int w, h) {
    regenSurf(w, h);
    resizeWindow(w, h);
  };
  std.lib.sdl_base.update;
}

void swap() { SDL_GL_SwapBuffers(); }

class SDLWindow : GLWindow {
  SDL_Surface* surf;
  bool is-set-up;
  bool isSetUp() { return is-set-up; }
  void setup() {
    SDL_Init (SDL_INIT_VIDEO);
    auto flags = SDL_OPENGL | SDL_GL_DOUBLEBUFFER | SDL_RESIZABLE;
    // flags |= extra-flags;
    // SDL_GL_SetAttribute(SDL_GL_ACCELERATED_VISUAL, 1);
    SDL_Surface* regen(int w, int h) {
      writeln "regenSurf($w, $h, 0, $flags)";
      auto res = SDL_SetVideoMode (w, h, 0, flags);
      if !res quit 1;
      initGL;
      // IMPORTANT: init gl FIRST
      resizeWindow (w, h);
      is-set-up = true;
      for (auto dg <- context-callbacks) dg();
      return res;
    }
    regenSurf = new &regen;
    surf = regenSurf(640, 480);
  }
  vec2i size() { return vec2i surf.(w, h); }
  void update() {
    .update surf;
    mouse-pressed = .mouse-pressed;
    mouse-pos = .mouse-pos;
    mouse-clicked = .mouse-clicked;
    mouse-released = .mouse-released;
  }
  bool claimed;
  void claim-cursor() {
    SDL_ShowCursor false;
    warp $ size() / 2;
    claimed = true;
  }
  void release-cursor() {
    SDL_ShowCursor true;
    claimed = false;
  }
  bool cursor-claimed() { return claimed; }
  void warp(vec2i to) { SDL_WarpMouse to; mouse-pos = to; }
  bool key-held(int charcode) {
    if ("a" <= charcode <= "z") charcode = charcode - "a" + SDLK_a;
    if (charcode < keyPressed.length) return keyPressed[charcode];
    return false;
  }
}
