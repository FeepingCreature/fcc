module std.lib.opengl.camera;

import std.math, std.matrix, std.lib.opengl.(, window);

abstract class Camera {
  vec3f pos;
  void apply();
  // undo just the rotation transforms
  void unrotate();
  // translate from world space to device space
  vec3f apply(vec3f world);
  // translate from device space to world space
  // if transforms = true, translate from local space to world space
  vec3f invert(vec3f screen, bool transforms = false);
  float aspect;
  import std.callset;
  CallSet!void onMovement;
}

abstract class PerspectiveCam : Camera {
  float fov, zNear, zFar;
  alias args = (fov, aspect, zNear, zFar);
  void init() {
    args = (45f, 1f, 0.01f, 1000f);
  }
  void apply() using mode GL {
    MatrixMode PROJECTION;
    LoadIdentity;
    gluPerspective args;
  }
  void unrotate();
  // cache assumption: matrices are consistent per frame
  (Matrix4x4 mat, int frameplusone) invert_transforms_cache, invert_notransforms_cache;
  vec3f invert(vec3f v, bool transforms = false) using mode GL {
    GetFloatv(MODELVIEW_MATRIX, Matrix4x4 mvmat);
    if (transforms) {
      alias c = invert_transforms_cache;
      if (c.frameplusone != glwindow.framecount + 1) {
        Matrix4x4 origmat;
        using ModelviewMatrix {
          apply;
          GetFloatv(MODELVIEW_MATRIX, origmat);
          c.frameplusone = glwindow.framecount + 1;
        }
        origmat.invert;
        origmat.multiply &mvmat;
        c.mat = origmat;
      }
      // TODO figure out why need w => 1
      return c.mat.multiply (v, w => 1);
    } else {
      v = v * 2 - 1;
      v.y = -v.y; // Oh OpenGL.
      alias c = invert_notransforms_cache;
      if (c.frameplusone != glwindow.framecount + 1) {
        mvmat.invert;
        GetFloatv(PROJECTION_MATRIX, Matrix4x4 prmat);
        prmat.invert;
        mvmat.multiply &prmat;
        c.mat = mvmat;
      }
      // return mvmat.multiply (v, w => 1);
      return c.mat.multiply (v, w => 1);
    }
  }
  vec3f apply(vec3f v) using mode GL {
    GetFloatv(MODELVIEW_MATRIX, Matrix4x4 mvmat);
    GetFloatv(PROJECTION_MATRIX, Matrix4x4 prmat);
    prmat.multiply &mvmat;
    auto res = prmat.multiply (v, w => 1);
    res.y = -res.y;
    res = res * 0.5 + 0.5;
    return res;
  }
}

template WorldCam(T) {
  class WorldCam : T {
    vec3f up, lookat;
    alias dir = (lookat - pos).normalize3f;
    alias left = up.cross3f(dir).normalize3f;
    vec3f setDir(vec3f v) { lookat = pos + v; return lookat; }
    string toString() { return "WorldCam <up $up, pos $pos, lookat $lookat>"; }
    alias calc = `
      auto dirz = dir;
      dirz.z = -dirz.z;
      auto
        left = up.cross3f(dirz).normalized,
        up = dirz.cross3f(left).normalized;
      auto horz = vec3f.Y.angle3f(up, left) / float:PI180;
      auto vert = vec3f.X.angle3f(left, up) / float:PI180;
      if (is-nan horz) horz = 0;
      if (is-nan vert) vert = -180;
    `;
    void init() {
      super.init();
      (up, pos) = (vec3f.Y, vec3f(0));
      setDir -vec3f.Z;
    }
    void apply() using mode GL {
      super.apply();
      MatrixMode MODELVIEW;
      LoadIdentity;
      mixin calc;
      horz.Rotatef vec3f.X;
      vert.Rotatef vec3f.Y;
      Translatef (-pos);
    }
    (Matrix4x4 mat, int frameplusone) unrotate_cache;
    void unrotate() using mode GL {
      if (fastgl.fast) {
        // assumption: no in-frame movement
        alias c = unrotate_cache;
        if (c.frameplusone != glwindow.framecount + 1) {
          mixin calc;
          c.mat = Matrix4x4-ident;
          c.mat.rotate(vert, -vec3f.Y);
          c.mat.rotate(horz, -vec3f.X);
          c.frameplusone = glwindow.framecount + 1;
        }
        fastgl.matrix.multiply &c.mat;
        return;
      }
      // Huh. No idea what this was about.
      // if you find out: DOCUMENT!
      // auto origin = invert(vec3f(0), => transforms);
      // apply;
      // Translatef origin;
      // mixin calc;
      // vert.Rotatef -vec3f.Y;
      // horz.Rotatef -vec3f.X;
      mixin calc;
      vert.Rotatef -vec3f.Y;
      horz.Rotatef -vec3f.X;
    }
  }
}

vec3f normalize3f(vec3f v) return v.normalized;

// controllable by a device that offers two-dimensional relative motion, like a mouse or joystick
interface Supports2DControl {
  void turn-up(float f);
  void turn-left(float f);
}

template EgoCam(T) {
  class EgoCam : T, Supports2DControl {
    float turnX, turnY;
    void init(vec3f p, float x, y) { (pos, turnX, turnY) = (p, x, y); super.init(); }
    void init() { init(vec3f(0), 0, 0); }
    void turn-left(float f) { onMovement(); turnX += f; }
    alias lowlimit = -PI / 2 + 0.1;
    alias highlimit = PI / 2 - 0.1;
    void turn-up(float f) { onMovement(); turnY -= f; if (turnY < lowlimit) turnY = lowlimit; if (turnY > highlimit) turnY = highlimit; }
    void move-forward(float f) { onMovement(); pos += dir * f; }
    void move-left(float f) { onMovement(); pos += left * f; }
    alias dir = vec3f.Z.rotate3f(vec3f.X, turnY).rotate3f(vec3f.Y, turnX).normalize3f;
    alias left = vec3f.Y.cross3f(dir).normalize3f;
    alias calc = `
      auto dirz = dir; dirz.z = -dirz.z;
      auto left = vec3f.Y.cross3f(dirz).normalized, up = dirz.cross3f(left).normalized;
      auto angle1 = vec3f.Y.angle3f(up, left) / PI180,
           angle2 = vec3f.X.angle3f(left, up) / PI180;
      if (angle1.is-nan()) angle1 = 0;
      if (angle2.is-nan()) angle2 = 180;
    `;
    void apply() using mode GL {
      super.apply();
      MatrixMode MODELVIEW;
      LoadIdentity;
      mixin calc;
      Rotatef (angle1, vec3f.X);
      Rotatef (angle2, vec3f.Y);
      Translatef (-pos);
    }
    void unrotate() using mode GL {
      mixin calc;
      if (fastgl.fast) {
        fastgl.matrix.rotate(angle2, -vec3f.Y);
        fastgl.matrix.rotate(angle1, -vec3f.X);
      } else {
        Rotatef (angle2, -vec3f.Y);
        Rotatef (angle1, -vec3f.X);
      }
    }
  }
}

template OrbitCam(T) {
  class OrbitCam : WorldCam!T, Supports2DControl {
    float distance;
    void init(vec3f p, t, float fov = 45f) { super.init(); this.fov = fov; (pos, lookat) = (p, t); distance = |lookat - pos|; writeln "inited to $this"; }
    void move(vec3f v) {
      onMovement();
      pos += v;
      lookat += v;
    }
    void turn-left(float f) {
      onMovement();
      auto delta = lookat - pos;
      delta = delta.rotate3f(vec3f.Y, f);
      pos = lookat - delta;
    }
    void turn-up(float f) {
      onMovement();
      auto delta = lookat - pos;
      delta = delta.rotate3f(delta.cross3f(up).normalized, f);
      delta *= distance / |delta|;
      pos = lookat - delta;
    }
  }
}

alias disregard-this-its-just-here-to-instantiate-worldcam-so-fcc-doesnt-fuzz-about-the-quote-unnecessary-unquote-window-import = WorldCam!PerspectiveCam;
