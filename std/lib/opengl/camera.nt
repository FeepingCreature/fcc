module std.lib.opengl.camera;

import std.math, std.lib.opengl;

abstract class Camera {
  vec3f pos;
  void apply();
  void unrotate(); // undo just the rotation transforms
  vec3f invert(vec3f screen); // translate from device space into world space
  float aspect;
  import std.callset;
  CallSet!void onMovement;
}

abstract class PerspectiveCam : Camera {
  float fov, zNear, zFar;
  alias args = (fov, aspect, zNear, zFar);
  void init() {
    args = (45f, 1f, 0.01f, 1000f);
  }
  void apply() using mode GL {
    MatrixMode PROJECTION;
    LoadIdentity;
    gluPerspective args;
  }
  void unrotate();
  vec3f invert(vec3f v) using mode GL {
    float x 16 modelview, projection;
    vec4f mat-multiply(float* matrix, vec4f v) {
      return vec4f(
        matrix[0 ]*v.x + matrix[4 ]*v.y + matrix[8 ]*v.z + matrix[12]*v.w,
        matrix[1 ]*v.x + matrix[5 ]*v.y + matrix[9 ]*v.z + matrix[13]*v.w,
        matrix[2 ]*v.x + matrix[6 ]*v.y + matrix[10]*v.z + matrix[14]*v.w,
        matrix[3 ]*v.x + matrix[7 ]*v.y + matrix[11]*v.z + matrix[15]*v.w
      );
    }
    GetFloatv(MODELVIEW_MATRIX, modelview.ptr);
    GetFloatv(PROJECTION_MATRIX, projection.ptr);
    matrix4x4-invert &modelview;
    matrix4x4-invert &projection;
    return mat-multiply(modelview, mat-multiply(projection, vec4f(v.x, v.y, v.z, 1))).(xyz/w);
  }
}

template WorldCam(T) {
  class WorldCam : T {
    vec3f up, lookat;
    alias dir = (lookat - pos).normalize3f;
    alias left = up.cross3f(dir).normalize3f;
    vec3f setDir(vec3f v) { lookat = pos + v; return lookat; }
    string toString() { return "WorldCam <up $up, pos $pos, lookat $lookat>"; }
    alias calc = `
      auto dirz = dir;
      dirz.z = -dirz.z;
      auto
        left = up.cross3f(dirz).normalized,
        up = dirz.cross3f(left).normalized;
      auto horz = vec3f.Y.angle3f(up, left) / PI180;
      auto vert = vec3f.X.angle3f(left, up) / PI180;
      if (is-nan horz) horz = 0;
      if (is-nan vert) vert = -180;
    `;
    void init() {
      super.init();
      (up, pos) = (vec3f.Y, vec3f(0));
      setDir -vec3f.Z;
    }
    void apply() using mode GL {
      super.apply();
      MatrixMode MODELVIEW;
      LoadIdentity;
      mixin calc;
      horz.Rotatef vec3f.X;
      vert.Rotatef vec3f.Y;
      Translatef (-pos);
    }
    void unrotate() using mode GL {
      mixin calc;
      vert.Rotatef -vec3f.Y;
      horz.Rotatef -vec3f.X;
    }
  }
}

vec3f normalize3f(vec3f v) return v.normalized;

// controllable by a device that offers two-dimensional relative motion, like a mouse or joystick
interface Supports2DControl {
  void turn-up(float f);
  void turn-left(float f);
}

template EgoCam(T) {
  class EgoCam : T, Supports2DControl {
    float turnX, turnY;
    void init(vec3f p, float x, y) { (pos, turnX, turnY) = (p, x, y); super.init(); }
    void init() { init(vec3f(0), 0, 0); }
    void turn-left(float f) { onMovement.call(); turnX += f; }
    alias lowlimit = -PI / 2 + 0.1;
    alias highlimit = PI / 2 - 0.1;
    void turn-up(float f) { onMovement.call(); turnY -= f; if (turnY < lowlimit) turnY = lowlimit; if (turnY > highlimit) turnY = highlimit; }
    void move-forward(float f) { onMovement.call(); pos += dir * f; }
    void move-left(float f) { onMovement.call(); pos += left * f; }
    alias dir = vec3f.Z.rotate3f(vec3f.X, turnY).rotate3f(vec3f.Y, turnX).normalize3f;
    alias left = vec3f.Y.cross3f(dir).normalize3f;
    alias calc = `
      auto dirz = dir; dirz.z = -dirz.z;
      auto left = vec3f.Y.cross3f(dirz).normalized, up = dirz.cross3f(left).normalized;
      auto angle1 = vec3f.Y.angle3f(up, left) / PI180,
           angle2 = vec3f.X.angle3f(left, up) / PI180;
      if (angle1.is-nan()) angle1 = 0;
      if (angle2.is-nan()) angle2 = 180;
    `;
    void apply() using mode GL {
      super.apply();
      MatrixMode MODELVIEW;
      LoadIdentity;
      mixin calc;
      Rotatef (angle1, vec3f.X);
      Rotatef (angle2, vec3f.Y);
      Translatef (-pos);
    }
    void unrotate() using mode GL {
      mixin calc;
      Rotatef (angle2, -vec3f.Y);
      Rotatef (angle1, -vec3f.X);
    }
  }
}

template OrbitCam(T) {
  class OrbitCam : WorldCam!T, Supports2DControl {
    float distance;
    void init(vec3f p, t, float fov = 45f) { super.init(); this.fov = fov; (pos, lookat) = (p, t); distance = |lookat - pos|; writeln "inited to $this"; }
    void move(vec3f v) {
      onMovement.call();
      pos += v;
      lookat += v;
    }
    void turn-left(float f) {
      onMovement.call();
      auto delta = lookat - pos;
      delta = delta.rotate3f(vec3f.Y, f);
      pos = lookat - delta;
    }
    void turn-up(float f) {
      onMovement.call();
      auto delta = lookat - pos;
      delta = delta.rotate3f(delta.cross3f(up).normalized, f);
      delta *= distance / |delta|;
      pos = lookat - delta;
    }
  }
}
