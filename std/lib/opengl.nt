module std.lib.opengl;

platform(!*-mingw32) {
  // only opengl 1.2 is supported on windows: thus, must only enable this under linux
  pragma(define, "GL_GLEXT_PROTOTYPES");
}
// depends on GLsizei, which is defined in gl.h - yuck
pragma(include_prepend, "GL/gl.h < GL/glext.h");
public import c.GL.gl;
public import c.GL.glu;
public import c.GL.glext;
public import std.lib.opengl.rgbcolor;

platform(i686-mingw32) {
  pragma(lib, "opengl32");
  pragma(lib, "glu32");
  extern(Windows) void* wglGetProcAddress(char*);
  template lookupFun(T) {
    _markStdCall T lookupFun(char* c) { return _markStdCall T:wglGetProcAddress(c); }
  }
  alias glGenBuffers    = *lookupFun!void function(GLsizei, GLuint*) "glGenBuffers";
  alias glDeleteBuffers = *lookupFun!void function(GLsizei, GLuint*) "glDeleteBuffers";
  alias glBindBuffer    = *lookupFun!void function(GLenum, GLuint) "glBindBuffer";
  alias glMapBuffer     = *lookupFun!void* function(GLenum, GLenum) "glMapBuffer";
  alias glMapBufferRange= *lookupFun!void* function(GLenum, GLintptr, GLsizeiptr, GLbitfield) "glMapBufferRange";
  alias glUnmapBuffer   = *lookupFun!bool function(GLenum) "glUnmapBuffer";
  alias glBufferData    = *lookupFun!void function(GLenum, GLsizeiptr, void*, GLenum) "glBufferData";
  alias glBufferSubData = *lookupFun!void function(GLenum, GLintptr, GLsizeiptr, void*) "glBufferSubData";
  static if (!is-defined GL_ARRAY_BUFFER) {
    alias GL_ARRAY_BUFFER = GLenum: 0x8892;
    alias GL_ELEMENT_ARRAY_BUFFER = GLenum: 0x8893;
    alias GL_STREAM_DRAW  = 0x88E0, GL_STREAM_READ  = 0x88E1, GL_STREAM_COPY  = 0x88E2,
          GL_STATIC_DRAW  = 0x88E4, GL_STATIC_READ  = 0x88E5, GL_STATIC_COPY  = 0x88E6,
          GL_DYNAMIC_DRAW = 0x88E8, GL_DYNAMIC_READ = 0x88E9, GL_DYNAMIC_COPY = 0x88EA;
    alias GL_PIXEL_UNPACK_BUFFER = 0x88EC;
    alias GL_MAP_WRITE_BIT = 0x0002, GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
    alias GL_READ_ONLY = 0x88B8, GL_WRITE_ONLY = 0x88B9, GL_READ_WRITE = 0x88BA;
  }
}

platform(default) {
  public import c.GL.glx;
  pragma(lib, "GL");
  pragma(lib, "GLU");
  extern(C) void* glXGetProcAddress(char*);
  template lookupFun(T) {
    T lookupFun(char* c) { return T:glXGetProcAddress(c); }
  }
}

defmode GL "prefix GL_ prefix gl suffix _ARB suffix ARB";

template PrimitiveContext(alias A) {
  context PrimitiveContext {
    alias onUsing = glBegin A;
    alias onExit = glEnd;
  }
}

interface ITexture {
  void register();
  void bind();
  void upload();
  void coord(vec2f);
  vec2i getSize();
}

interface FastITexture : ITexture { // has a coord() that supports saving to fastgl
  GLuint getUnderlyingTexID();
}

import std.hashmap, std.matrix;
/**
If this is enabled, it indicates that no OpenGL state changes will be done
except by Neat library functions. This allows us to forgo redundant state changes
and cache the results of OpenGL queries.**/
context fastgl {
  int _fast;
  alias fast = _fast > 0;
  void onUsing() {
    if (!(_fast ++)) {
      texid = 0;
      capstates.clear;
      matrix = Matrix4x4-ident;
      cur-color = vec4f(1);
    }
  }
  void onExit() {
    if (!(-- _fast)) {
      flush-tex;
    }
  }
  
  // last set state of OpenGL capabilities (glEnable/glDisable)
  Hashmap!(int, GLboolean) capstates;
  
  GLuint texid; // last bound OpenGL texture ID
  void set-texid(GLuint newid) {
    if (texid == newid) return;
    // flush-tex; // nope - this is the state machine cache, not the vbo cache
    texid = newid;
  }
  
  // TODO support
  // context vbocache {
    GLuint vbo-texid;
    void delegate(void delegate()) vbo-wrap-dg;
    
    void set-tex(FastITexture fit) {
      auto fid = fit.getUnderlyingTexID();
      if (vbo-texid != fid) { flush-tex; }
      vbo-texid = fid;
    }
    void flush-tex() { flush-vbo; }
    
    void set-wrap(type-of vbo-wrap-dg dg) {
      if (dg !is vbo-wrap-dg) {
        flush-dg;
      }
      vbo-wrap-dg = dg;
    }
    void flush-dg() { flush-vbo; }
    
    Matrix4x4 matrix;
    
    vec4f cur-color;
    vec2f[auto~] texcoords;
    vec3f[auto~] vertices;
    vec4f[auto~] colors;
    
    void vertex(float x, y = 0, z = 0) {
      colors ~= cur-color;
      vertices ~= matrix.multiply(vec3f(x, y, z), w => 1);
    }
    void color(vec4f v) { cur-color = v; }
    provide "flush calls clear, not free";
    void flush-vbo() {
      assert(texcoords.length == vertices.length);
      if (!texcoords.length) return;
      // writeln "vbo flush $(texcoords.length) on $vbo-texid";
      using mode GL {
        if (vbo-texid) BindTexture(TEXTURE_2D, vbo-texid);
        auto doit = Î»{
          /*using glWithCap!TEXTURE_2D using Quads {
            for auto tc <- texcoords && auto v <- vertices {
              TexCoord2f tc; Vertex3f v;
            }
          }*/
          EnableClientState VERTEX_ARRAY;
          EnableClientState TEXTURE_COORD_ARRAY;
          EnableClientState COLOR_ARRAY;
          onSuccess {
            DisableClientState VERTEX_ARRAY;
            DisableClientState TEXTURE_COORD_ARRAY;
            DisableClientState COLOR_ARRAY;
          }
          TexCoordPointer(2, GL_FLOAT, size-of vec2f, texcoords.ptr);
          VertexPointer(3, GL_FLOAT, size-of vec3f, vertices.ptr);
          ColorPointer(4, GL_FLOAT, size-of vec4f, colors.ptr);
          using WithCap!TEXTURE_2D DrawArrays(QUADS, 0, texcoords.length);
        }
        
        if (vbo-wrap-dg) vbo-wrap-dg(doit);
        else doit();
      }
      texcoords.clear;
      vertices.clear;
      colors.clear;
      vbo-texid = 0;
      vbo-wrap-dg = null;
    }
  // }
}

alias Points = PrimitiveContext!GL_POINTS;

alias Lines = PrimitiveContext!GL_LINES;
alias LineStrip = PrimitiveContext!GL_LINE_STRIP;
alias LineLoop = PrimitiveContext!GL_LINE_LOOP;

alias Triangles = PrimitiveContext!GL_TRIANGLES;
alias TriangleStrip = PrimitiveContext!GL_TRIANGLE_STRIP;
alias TriangleFan = PrimitiveContext!GL_TRIANGLE_FAN;
// deprecated in GL3
alias Quads = PrimitiveContext!GL_QUADS;
alias QuadStrip = PrimitiveContext!GL_QUAD_STRIP;
alias Polygon = PrimitiveContext!GL_POLYGON;

context glMatrix {
  void pushAll() using mode GL {
    GetIntegerv(MATRIX_MODE, &int mode);
    onSuccess MatrixMode mode;
    MatrixMode PROJECTION; PushMatrix;
    MatrixMode MODELVIEW;  PushMatrix;
    MatrixMode TEXTURE;    PushMatrix;
  }
  void popAll() using mode GL {
    GetIntegerv(MATRIX_MODE, &int mode);
    onSuccess MatrixMode mode;
    MatrixMode PROJECTION; PopMatrix;
    MatrixMode MODELVIEW;  PopMatrix;
    MatrixMode TEXTURE;    PopMatrix;
  }
  alias onUsing = pushAll();
  alias onExit  = popAll ();
}

context glModelviewMatrix {
  void push() using mode GL {
    GetIntegerv(MATRIX_MODE, &int mode);
    if (mode != MODELVIEW) raise new Error
      "cannot push modelview matrix: not in modelview mode, but $mode";
    PushMatrix;
  }
  void pop() using mode GL {
    GetIntegerv(MATRIX_MODE, &int mode);
    if (mode != MODELVIEW) raise new Error
      "cannot pop modelview matrix: not in modelview mode, but $mode";
    PopMatrix;
  }
  alias onUsing = push();
  alias onExit  = pop ();
}

template glCap(alias Cap) {
  static if (Cap == GL_COLOR_ARRAY || Cap == GL_EDGE_FLAG_ARRAY || Cap == GL_INDEX_ARRAY || Cap == GL_NORMAL_ARRAY
  || Cap == GL_TEXTURE_COORD_ARRAY || Cap == GL_VERTEX_ARRAY) {
    context glCap {
      alias Enable = glEnableClientState;
      alias Disable = glDisableClientState;
    }
  } else {
    context glCap {
      alias Enable = glEnable;
      alias Disable = glDisable;
    }
  }
}

template glWithCap(alias Cap) {
  GLboolean[auto~] capstack;
  context glWithCap {
    void onUsing() {
      GLboolean state;
      if (fastgl.fast && auto p = fastgl.capstates.get(Cap)) {
        state = *p;
      } else {
        state = glIsEnabled Cap;
      }
      if (!state) (glCap!Cap).Enable(Cap);
      if (fastgl.fast) {
        fastgl.capstates.insert(Cap, true);
      }
      capstack ~= state;
    }
    void onExit() { auto prev = capstack.popEnd(); if (!prev) (glCap!Cap).Disable(Cap); }
  }
}

template glWithoutCap(alias Cap) {
  GLboolean[auto~] capstack;
  context glWithoutCap {
    void onUsing() { auto state = glIsEnabled Cap; if (state) (glCap!Cap).Disable(Cap); capstack ~= state; }
    void onExit() { auto prev = capstack.popEnd(); if (prev) (glCap!Cap).Enable(Cap); }
  }
}

class OpenGLError : Error {
  void init(string s) { super.init "OpenGLError: $s"; }
}

void gl-check() {
  using prefix GL_ {
    import std.macros.switchover;
    auto err = glGetError();
    switch GLenum i over i == err {
      case NO_ERROR: return;
      case INVALID_ENUM: raise new OpenGLError "invalid enum";
      case INVALID_VALUE: raise new OpenGLError "invalid value";
      case INVALID_OPERATION: raise new OpenGLError "invalid operation";
      case STACK_OVERFLOW: raise new OpenGLError "stack overflow";
      case STACK_UNDERFLOW: raise new OpenGLError "stack underflow";
      case OUT_OF_MEMORY: raise new OpenGLError "out of memory";
    }
    raise new OpenGLError "Unknown OpenGL error $err";
  }
}
