module std.lib.opengl;

public import c.GL.gl;
public import c.GL.glu;
pragma(define, "GL_GLEXT_PROTOTYPES");
public import c.GL.glext;
public import std.lib.opengl.rgbcolor;

platform(i686-mingw32) {
  pragma(lib, "opengl32");
  pragma(lib, "glu32");
  extern(Windows) void* wglGetProcAddress(char*);
  template lookupFun(T) {
    _markStdCall T lookupFun(char* c) { return _markStdCall T:wglGetProcAddress(c); }
  }
}

platform(default) {
  public import c.GL.glx;
  pragma(lib, "GL");
  pragma(lib, "GLU");
  extern(C) void* glXGetProcAddress(char*);
  template lookupFun(T) {
    T lookupFun(char* c) { return T:glXGetProcAddress(c); }
  }
}

context Triangles {
  alias onUsing = glBegin GL_TRIANGLES;
  alias onExit = glEnd;
}

context Quads {
  alias onUsing = glBegin GL_QUADS;
  alias onExit = glEnd;
}

context QuadStrip {
  alias onUsing = glBegin GL_QUAD_STRIP;
  alias onExit = glEnd;
}

context glMatrix {
  alias onUsing = glPushMatrix();
  alias onExit  = glPopMatrix ();
}

template glWithCap(alias Cap) {
  GLboolean[auto~] capstack;
  context glWithCap {
    void onUsing() { auto state = glIsEnabled Cap; if (!state) glEnable Cap; capstack ~= state; }
    void onExit() { auto prev = capstack.popEnd(); if (!prev) glDisable Cap; }
  }
}

template glWithoutCap(alias Cap) {
  GLboolean[auto~] capstack;
  context glWithoutCap {
    void onUsing() { auto state = glIsEnabled Cap; if (state) glDisable Cap; capstack ~= state; }
    void onExit() { auto prev = capstack.popEnd(); if (prev) glEnable Cap; }
  }
}

defmode GL "prefix GL_ prefix gl suffix _ARB suffix ARB";
