module std.lib.chipmunk;

public import c.chipmunk.chipmunk;

defmode cp "prefix cp";
pragma(lib, "chipmunk");

// bloody inline functions
void cpSpaceSetGravity(cpSpace* space, vec2d value) {
  space.gravity = cpVect:value;
}
void cpShapeSetFriction(cpShape* shape, float value) {
  if (true && shape.body) cpBodyActivate(shape.body);
  shape.u = value;
}
void cpShapeSetElasticity(cpShape* shape, float value) {
  if (false && shape.body) cpBodyActivate(shape.body);
  shape.e = value;
}
cpVect cpBodyGetPos(cpBody* body) {
  return body.p;
}
cpVect cpBodyGetVel(cpBody* body) {
  return body.v;
}
double cpBodyGetAngle(cpBody* body) {
  return body.a;
}
double cpBodyGetMass(cpBody* body) {
  return body.m;
}
extern(C) void arbiter_iterfunc(cpBody* body, cpArbiter* arbiter, void* data) {
  ref info = *(void delegate(cpBody*, cpArbiter*) dg)*:data;
  auto _threadlocal = getThreadlocal;
  info.dg(body, arbiter);
}
void cpBodyEachArbiter(cpBody* body, void delegate(cpBody*, cpArbiter*) dg) {
  auto tup = dg;
  c.chipmunk.chipmunk.cpBodyEachArbiter(body, &arbiter_iterfunc, void*: &tup);
}
extern(C) void bodyshape_iterfunc(cpBody* body, cpShape* shape, void* data) {
  ref info = *(void delegate(cpBody*, cpShape*) dg)*:data;
  auto _threadlocal = getThreadlocal;
  info.dg(body, shape);
}
void cpBodyEachShape(cpBody *body, void delegate(cpBody*, cpShape*) dg) {
  auto tup = dg;
  c.chipmunk.chipmunk.cpBodyEachShape(body, &bodyshape_iterfunc, void*: &tup);
}
