module std.lib.freetype2;

pragma(pkg-config, "freetype2");

pragma(lib, "z"); // mingw bug?

import c.freetype;
import std.math, std.unicode;

void FTcheck(FT_Error err) {
  if (err) raise new Error "Freetype error $err";
}

defmode FT "prefix FT_";

FT_Library library;

extern(C) {
  struct FT_MemoryRec_ {
    void* user, alloc, free, realloc;
  }
  FT_Error FT_New_Library (FT_MemoryRec_*, FT_Library*);
  void FT_Add_Default_Modules (FT_Library);
}
extern(System) {
  void* memalloc(FT_Memory mem, size_t size) {
    auto oesi = _esi; onSuccess _esi = oesi;
    _esi = mem.user;
    return .mem.malloc int:size;
  }
  void memfree(FT_Memory mem, void* block) {
    auto oesi = _esi; onSuccess _esi = oesi;
    _esi = mem.user;
    .mem.free block;
  }
  void* memrealloc(FT_Memory mem, size_t cur_size, new_size, void* block) {
    auto oesi = _esi; onSuccess _esi = oesi;
    _esi = mem.user;
    return .mem.realloc(block, new_size);
  }
}

void init() {
  FTcheck FT_Init_FreeType &library;
  /*auto mem = new FT_MemoryRec_;
  mem.user = _esi;
  mem.alloc = void*: &memalloc;
  mem.free = void*: &memfree;
  mem.realloc = void*: &memrealloc;
  FTcheck FT_New_Library(mem, &library);
  FT_Add_Default_Modules (library);*/
}

struct FontStyle {
  bool bold, italic, underlined;
  vec4f color, bgcol;
  int chars;
  string toString() {
    string res = "[";
    if (bold) res ~= "bold, ";
    if (italic) res ~= "italic, ";
    if (underlined) res ~= "underlined, ";
    res ~= "$color, length $chars]";
    return res;
  }
}

struct MyGlyph {
  int uchar;
  int index;
  FontStyle style;
  int left, top;
}

class Font {
  FT_Face face;
  void init(ubyte[] data, int size, int dpi) using mode FT {
    FTcheck New_Memory_Face(library, data.(char*:ptr, length), 0, &face);
    // FTcheck Set_Pixel_Sizes(face, 0, size);
    FTcheck Set_Char_Size(face, 0, size*64, dpi, dpi);
  }
  vec2i getKerning(int ch1, ch2) using mode FT {
    auto id1 = Get_Char_Index(face, FT_ULong: ch1);
    auto id2 = Get_Char_Index(face, FT_ULong: ch2);
    Get_Kerning (face, id1, id2, 0, &Vector delta);
    return delta.(vec2i(x, y));
  }
  vec2i getAdvance(int ch) using mode FT {
    auto index = Get_Char_Index(face, FT_ULong:ch);
    FTcheck Load_Glyph (face, index, LOAD_DEFAULT);
    FTcheck Get_Glyph (face.glyph, &Glyph glyph);
    onExit Done_Glyph glyph;
    
    return face.glyph.advance.(vec2i(x, y));
  }
  (vec2i, vec2i) getControlBox(int ch) using mode FT {
    auto index = Get_Char_Index(face, FT_ULong:ch);
    FTcheck Load_Glyph (face, index, LOAD_DEFAULT);
    FTcheck Get_Glyph (face.glyph, &Glyph glyph);
    onExit Done_Glyph glyph;
    
    Glyph_Get_CBox (glyph, FT_GLYPH_BBOX_PIXELS, &BBox box);
    return box.(vec2i(xMin, yMin), vec2i(xMax, yMax));
  }
  void getSize(string text, FontStyle[] styles, int* wp = null, hp = null) {
    toBuffer(text, styles, wp, hp, dontRender => true);
  }
  vec4f[] toBuffer(string text, FontStyle[] styles, int* wp = null, hp = null, bool dontRender = false) using mode FT {
    if (!text.length) {
      (*wp, *hp) = (0, 0);
      return null;
    }
    scope Glyph[auto~] glyphs; scope Vector[auto~] pos;
    onExit {
      for ref glyph <- glyphs
        Done_Glyph glyph;
    }
    Vector pen;
    int prevIndex;
    for (int id, int ch) <- zip(ints, new UTF8Decoder text) {
      { Glyph gl; glyphs ~= gl; }
      { Vector v; pos ~= v; }
      auto index = Get_Char_Index(face, FT_ULong:ch);
      if (id && index) {
        Get_Kerning (face, prevIndex, index, 0, &Vector delta);
        pen.x += delta.x;
      }
      prevIndex = index;
      pos[id] = pen;
      FTcheck Load_Glyph(face, index, LOAD_DEFAULT);
      FTcheck Get_Glyph(face.glyph, &glyphs[id]);
      pen.x += face.glyph.advance.x;
      pen.y += face.glyph.advance.y;
    }
    BBox bbox;
    bbox.(xMin, yMin, xMax, yMax) = (32767, 32767, -32768, -32768);
    auto prestyles = styles;
    int uptochar;
    for int id <- ints && ref glyph <- glyphs {
      while (prestyles.length && prestyles[0].chars == uptochar) { prestyles=prestyles[1..$]; uptochar = 0; }
      if (!prestyles.length) raise new sys.Error "1:Has run out of formatting data";
      uptochar ++;
      auto style = prestyles[0];
      
      if (style.italic) {
        FT_Matrix matrix;
        alias scalefactor = 0x10000;
        matrix.(xx, yy) = (scalefactor, scalefactor);
        matrix.(xy, yx) = (int:$ 0.2*scalefactor, 0);
        FTcheck Glyph_Transform(glyph, &matrix, null);
      }
      Glyph_Get_CBox (glyph, GLYPH_BBOX_PIXELS, &BBox glyph_bbox);
      using glyph_bbox {
        using pos[id] { xMin += x>>6; xMax += x>>6; yMin += y>>6; yMax += y>>6; }
        if (style.italic) { xMax += 2; }
        if (xMin < bbox.xMin) bbox.xMin = xMin;
        if (yMin < bbox.yMin) bbox.yMin = yMin;
        if (xMax > bbox.xMax) bbox.xMax = xMax;
        if (yMax > bbox.yMax) bbox.yMax = yMax;
      }
      if (bbox.xMin > bbox.xMax) raise new sys.Error "Didn't grow the BBox!";
    }
    
    // leave room for underlining
    auto up = face.underline_position >> 6, uw = face.underline_thickness >> 6;
    for auto style <- styles if (style.underlined && bbox.yMin > up - uw) bbox.yMin = up - uw;
    
    int w = bbox.(xMax - xMin), h = bbox.(yMax - yMin);
    if (wp) *wp = w; if (hp) *hp = h;
    
    if (dontRender) return null;
    
    auto vecs = [for i <- 0 .. w*h: vec4f(0)].eval;
    int x 4 bg_bounds;
    bool first = true;
    void expandBounds(int[] newRect) {
      for (int i = 0; i < 2; ++i) {
        if (first || newRect[i] < bg_bounds[i]) bg_bounds[i] = newRect[i];
        if (first || newRect[i+2] > bg_bounds[i+2]) bg_bounds[i+2] = newRect[i+2];
      }
      first = false;
    }
    vec4f last_bg;
    void nextBg(vec4f bg, bool flush) {
      for (int i = 0; i < 2; ++i) if (bg_bounds[i] < 0) bg_bounds[i] = 0;
      if (bg_bounds[2] !< w) bg_bounds[2] = w - 1;
      if (bg_bounds[3] !< h) bg_bounds[3] = h - 1;
      if (flush || last_bg != bg) {
        first = true;
        for (int y = bg_bounds[1]; y <= bg_bounds[3]; ++y) {
          for (int x = bg_bounds[0]; x <= bg_bounds[2]; ++x) {
            auto i = w * y + x;
            ref v = vecs[i];
            v = v * v.w + last_bg * (1 - v.w);
          }
        }
        last_bg = bg;
      }
    }
    
    for int id <- ints && auto glyph <- glyphs {
      while (styles.length && !styles[0].chars) styles=styles[1..$];
      if (!styles.length) raise new sys.Error "2:Has run out of formatting data";
      styles[0].chars --;
      auto style = styles[0];
      
      auto nextStyle() {
        if (style.chars) return &styles[0];
        for auto s <- refs styles if (s.chars) return s;
        return null;
      }
      
      FTcheck Glyph_To_Bitmap(&glyph, RENDER_MODE_NORMAL, &pos[id], false);
      auto bit = BitmapGlyph: glyph;
      
      if (id && !bit.left) continue; // space or something
      
      auto yt = bit.bitmap.rows + 1;
      if (style.underlined) yt = bbox.(yMax - yMin) + 4; // draw down to the underline
      auto xt = bit.bitmap.width + 1;
      if (style.underlined && (auto ns = nextStyle()) && ns.underlined) xt = (pos[id+1].x>>6) - (pos[id].x>>6) + 1;
      auto left = bit.left - bbox.xMin, top = bbox.yMax - bit.top;
      bool inside(Bitmap* bmp, int x, int y) {
        if (x < 0 || y < 0) return false;
        if (x !< bmp.width || y !< bmp.rows) return false;
        return true;
      }
      int index(Bitmap* bmp, int x, y) { return bmp.pitch * y + x; }
      for int y <- -1..yt {
        for int x <- -1..xt {
          float a = 0f;
          using &bit.bitmap {
            if (inside(x, y)) a += buffer[index(x, y)]/255f;
            if (style.bold) {
              if (inside(x-1,y)) a += buffer[index(x-1, y)]/1024f;
              if (inside(x+1,y)) a += buffer[index(x+1, y)]/1024f;
              if (inside(x,y-1)) a += buffer[index(x, y-1)]/1024f;
              if (inside(x,y+1)) a += buffer[index(x, y+1)]/1024f;
            }
            if (a>1f) a=1f;
          }
          auto
            dx = left + x, dy = top + y,
            i = w*dy + dx, u = bbox.yMax - (face.underline_position/64f);
          if (style.underlined) {
            auto na = 1f/abs(dy-u);
            na *= na*na*na; // Naaa naaaaa naaaaaa nananaaaaaaa
            if (na>0.1f) {
              if (na>1f) na=1f;
              if (na>a) a=na;
            }
          }
          a = pow(a, 1/3.0);
          auto me = style.color * vec4f(1f, 1f, 1f, a);
          if (dx !< 0 && dx < w && dy !<0 && dy < h) {
            if (a != 0 && vecs[i].w == 0) vecs[i] += me;
          }
        }
      }
      nextBg(style.bgcol, false);
      expandBounds [left, top, left+xt, top+yt];
    }
    nextBg(vec4f(0), true); // finalize
    return vecs;
  }
}

class TextureAtlas {
  Texture backing;
  vec2i cursor;
  int current-height;
  alias current-free = backing.size - cursor;
  void linebreak() {
    cursor.x = 0;
    cursor.y += current-height;
    current-height = 0;
  }
  SubTexture alloc(int w, h) {
    w += 2; // leave some edge space
    h += 2; // likewise
    if (w > backing.width) fail "Backing texture not large enough for $((w,h))";
    if (w > current-free.x) linebreak;
    if (h > current-free.y) fail "Ran out of vertical space while allocating $((w,h))";
    auto st = new SubTexture;
    st.sup = backing;
    st.from = cursor + 1;
    st.size = vec2i(w - 2, h - 2);
    cursor.x += w;
    current-height = [current-height, h][current-height < h];
    return st;
  }
}

alias Settings = (int size, vec4f fore, vec4f back, bool bold, bool italic);

class TextureCache {
  TextureAtlas back;
  void init(TextureAtlas ta) back = ta;
  alias Key = (string, Settings);
  (Key, SubTexture)[auto~] allocated;
  SubTexture alloc(int w, h, Key key, bool* was-in-cache) {
    *was-in-cache = false;
    // TODO: trie?
    for auto thing <- allocated
      if (thing[0] == key) {
        *was-in-cache = true;
        return thing[1];
      }
    auto res = back.alloc(w, h);
    // writeln "'$key' ($w, $h) => $(res.(from, size))";
    allocated ~= (key, res);
    return res;
  }
}

TextureCache cache;
void initCache() {
  if cache return;
  using new TextureAtlas {
    backing = new Texture (512, 512, vec4f[]: null);
    backing.mode = TexMode.Nearest;
    backing.upload;
    cache = new TextureCache that;
  }
}

import std.lib.opengl.texture;
(SubTexture tex, vec2i offs)[] layoutText(Font font, string text, Settings settings, int* widthp, maxheightp, baselinep) {
  ref width = *widthp;
  ref maxheight = *maxheightp;
  ref baseline = *baselinep;
  initCache;
  (SubTexture, vec2i)[auto~] res;
  maxheight = 0;
  baseline = 0;
  FontStyle fs;
  fs.color = settings.fore;
  fs.bgcol = settings.back;
  fs.chars = 1;
  fs.bold  = settings.bold;
  fs.italic = settings.italic;
  bool first = true;
  vec2i pos, prev-pos;
  bool debugme = false;
  int overhang;
  auto it1 = cat([""], new UTF8Iterator text);
  auto it2 = new UTF8Iterator text;
  int bottomdist = 99999;
    
  for string (prev-ch, ch) <- zip(it1, it2) {
    font.getSize(ch, [fs], &int width, &int height);
    if (debugme) writeln "$ch => $((width, height))";
    
    using cache.alloc(width, height, (ch, settings), &bool was-found) {
      if (!was-found) {
        auto buf = font.toBuffer(ch, [fs], null, null);
        overwrite buf;
        buf.free;
      }
      if (!first) {
        auto kern = font.getKerning(int:*prev-ch.ptr, int:*ch.ptr);
        if (debugme) writeln "kern $kern";
        pos.x += kern.x >> 6;
      }
      
      auto box = font.getControlBox(int:*ch.ptr);
      if (box[0].y < bottomdist) bottomdist = box[0].y;
      if (debugme) writeln "box $box $bottomdist";
      
      auto shift = box[0].(vec2i(x, -y)); // box is up from baseline!
      if (shift.y > 0) height -= shift.y;
      
      if (height > maxheight) maxheight = height;
      if (shift.y > baseline) baseline = shift.y;
      
      pos += shift;
      
      res ~= (that, pos - prev-pos);
      prev-pos = pos;
      
      pos -= shift;
      
      auto step = font.getAdvance(int:*ch.ptr);
      pos += step.(vec2i(x >> 6, y >> 6));
      overhang = 0;
      if (settings.italic) overhang += 2;
    }
    first = false;
  }
  if (bottomdist != 99999 && bottomdist > 0) {
    if (debugme) writeln "$text: correct by $bottomdist";
    for ref sub <- res {
      sub[1].y += bottomdist;
    }
    if (debugme) writeln "=> $res";
  }
  if (debugme) writeln "$text maxheight = $maxheight";
  width = pos.x + overhang;
  return res[];
}
