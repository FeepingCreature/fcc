module std.lib.gtk;

pragma(pkg-config, "gtk+-2.0");

public import c.gtk.gtk;

alias gtcic = g_type_check_instance_cast;

defmode GTK_OBJECT "gobject-helper";
  defmode GTK_WIDGET "gobject-helper <GTK_OBJECT>";
    defmode GTK_CONTAINER "gobject-helper <GTK_WIDGET>";
      defmode GTK_BIN "gobject-helper <GTK_CONTAINER>";
        defmode GTK_WINDOW "gobject-helper <GTK_BIN>";
        defmode GTK_BUTTON "gobject-helper <GTK_BIN>";
        defmode GTK_SCROLLED_WINDOW "gobject-helper <GTK_BIN>";
        defmode GTK_VIEWPORT "gobject-helper <GTK_BIN>";
      defmode GTK_BOX "gobject-helper <GTK_CONTAINER>";
      defmode GTK_TREE_VIEW "gobject-helper <GTK_CONTAINER>";
    defmode GTK_ENTRY "gobject-helper <GTK_WIDGET>";
    defmode GTK_MISC "gobject-helper <GTK_WIDGET>";
      defmode GTK_IMAGE "gobject-helper <GTK_MISC>";
  defmode GTK_CELL_RENDERER "gobject-helper <GTK_OBJECT>";
    defmode GTK_CELL_RENDERER_TEXT "gobject-helper <GTK_CELL_RENDERER>";
defmode GTK_TREE_VIEW_COLUMN "gobject-helper";
defmode GTK_TREE_MODEL "gobject-helper";
defmode GTK_TREE_STORE "gobject-helper";

defmode GDK_PIXBUF_LOADER "gobject-helper";

(void*, void*, void*)[~] store;

template call-dg-threadlocal(T) {
  extern(C) ReturnType T call-dg-threadlocal (GtkObject* obj, void* data) {
    alias ret = ReturnType T;
    alias paramless = !!types-equal(ParamTypes T, ParamTypes void delegate());
    static if paramless {
      auto tup = *(ret delegate(), void*)*: data;
    } else {
      auto tup = *(ret delegate(ParamTypes T), void*)*: data;
    }
    
    auto _threadlocal = tup[1];
    
    static if types-equal(ret, void) {
      static if paramless {
        tup[0] ();
      } else {
        tup[0] ParamTypes T: obj;
      }
    } else {
      static if paramless {
        return tup[0] ();
      } else {
        return tup[0] obj;
      }
    }
  }
}

template g_signal_connect(T) {
  // void g_signal_connect (GtkObject* w, string s, void delegate(GtkObject*) dg) {
  void g_signal_connect (T t) {
    store ~= (void*, void*, void*): (t[2], _threadlocal);
    auto fn = &(call-dg-threadlocal!type-of t[2]);
    import std.string;
    g_signal_connect_data (gpointer: t[0], toStringz t[1], GCallback: fn, &store[$-1], null, 0);
  }
}
