module std.lib.glfw3;

public import c.GLFW.glfw3;

import std.lib.opengl; // enforce library ordering

pragma(pkg-config, "glfw3");

defmode GLFW "prefix GLFW_ prefix glfw";

static if (types-equal weak (GLFWwindow, void)) {
  alias GLFWWinType = GLFWwindow*;
} else {
  alias GLFWWinType = GLFWwindow;
}

void delegate(GLFWWinType, int, int) windowSizeCallback;
void delegate(GLFWWinType, int key, scancode, action, mods) keyCallback;
void delegate(GLFWWinType, int) charCallback;
void delegate(GLFWWinType, int, int) cursorPosCallback;
void delegate(GLFWWinType, int button, action, mods) mouseButtonCallback;
void delegate(GLFWWinType, double, double) scrollCallback;
void delegate(GLFWWinType) windowCloseCallback;

extern(C) {
  void WindowSizeCallback(GLFWWinType wnd, int w, h) {
    auto _threadlocal = getThreadlocal;
    windowSizeCallback?(wnd, w, h);
  }
  void KeyCallback(GLFWWinType wnd, int k, scancode, action, mods) {
    auto _threadlocal = getThreadlocal;
    keyCallback?(wnd, k, scancode, action, mods);
  }
  void CharCallback(GLFWWinType wnd, int k) {
    auto _threadlocal = getThreadlocal;
    charCallback?(wnd, k);
  }
  void CursorPosCallback(GLFWWinType wnd, double x, y) {
    auto _threadlocal = getThreadlocal;
    cursorPosCallback?(wnd, int:x, int:y);
  }
  void MouseButtonCallback(GLFWWinType wnd, int button, action, mods) {
    auto _threadlocal = getThreadlocal;
    mouseButtonCallback?(wnd, button, action, mods);
  }
  void ScrollCallback(GLFWWinType wnd, double x, y) {
    auto _threadlocal = getThreadlocal;
    scrollCallback?(wnd, x, y);
  }
  void WindowCloseCallback(GLFWWinType wnd) {
    auto _threadlocal = getThreadlocal;
    return windowCloseCallback?(wnd);
  }
  void HandleError(int code, char* description) {
    auto _threadlocal = getThreadlocal;
    import std.string;
    raise new GLFWError "$code: $((CToString description).dup)";
  }
}

void initCallbacks(GLFWWinType handle) using mode GLFW using handle {
  SetWindowSizeCallback &WindowSizeCallback;
  SetKeyCallback &KeyCallback;
  SetCharCallback &CharCallback;
  SetCursorPosCallback &CursorPosCallback;
  SetMouseButtonCallback &MouseButtonCallback;
  SetScrollCallback &ScrollCallback;
  SetWindowCloseCallback &WindowCloseCallback;
}

import std.lib.opengl.window;

class GLFWError : Error {
  void init(string s) using mode GLFW {
    static if (is-defined GetError) {
      auto num = GetError();
      import std.string;
      auto text = CToString ErrorString num;
      super.init "GLFWError: $s: $num($text)";
     } else {
      super.init "GLFWError: $s";
     }
  }
}

class GLFWWindow : GLWindow {
  GLFWWinType handle;
  int w, h;
  vec2i size() { return vec2i(w, h); }
  void key(GLFWWinType window, int k, scancode, action, mods) {
    if (window != handle) raise new Error "Called key() with $(window) but handle is $(handle)";
    // writeln "$k with $action";
    void set(Key code) {
      if (key-held    .length < code + 1) key-held     ~= new bool[] code + 1 - key-held    .length;
      if (key-pressed .length < code + 1) key-pressed  ~= new bool[] code + 1 - key-pressed .length;
      if (key-repeated.length < code + 1) key-repeated ~= new bool[] code + 1 - key-repeated.length;
      if (key-released.length < code + 1) key-released ~= new bool[] code + 1 - key-released.length;
      
      if (action == GLFW_PRESS) {
        key-held[code] = true;
        key-pressed[code] = true;
      } else if (action == GLFW_REPEAT) {
        key-repeated[code] = true;
      } else {
        key-held[code] = false;
        key-released[code] = true;
      }
    }
    
    if (GLFW_KEY_A <= k <= GLFW_KEY_Z)
      set Key:$ Key.A + k - GLFW_KEY_A;
    
    import std.macros.switchover;
    using Key using prefix GLFW_KEY_ switch int i over i == k {
      case ENTER: set Return;
      case RIGHT: set RightArrow;
      case LEFT : set LeftArrow;
      case DOWN : set DownArrow;
      case UP   : set UpArrow;
      case INSERT : set Insert;
      case HOME   : set Home;
      case PAGE_UP: set PageUp;
      case DELETE : set Delete;
      case END    : set End;
      case PAGE_DOWN   : set PageDown;
      case BACKSPACE   : set Backspace;
      case LEFT_SHIFT  : set LeftShift;
      case RIGHT_SHIFT : set RightShift;
      case LEFT_CONTROL: set LeftControl;
      case RIGHT_CONTROL:set RightControl;
      case ESCAPE:set Escape;
      case PAUSE: set Pause;
      case GLFW_KEY_F1..GLFW_KEY_F12: set Key:(Key.F1 + k - GLFW_KEY_F1);
    }
  }
  string queuedInput;
  void handleChar(GLFWWinType window, int k) {
    if (window != handle) raise new Error "Called handleChar() with $(window) but handle is $(handle)";
    // don't callback yet; we're called from C so we can't trust the alignment
    import std.unicode;
    scope ch = encode k;
    queuedInput ~= ch;
  }
  void reshape(GLFWWinType window, int width, height) {
    if (handle && window != handle) raise new Error "Called reshape() with $(window) but handle is $(handle)";
    (w, h) = (width, height);
    glViewport(0, 0, width, height);
  }
  void mousepos(GLFWWinType window, int x, y) {
    if (window != handle) raise new Error "Called mousepos() with $(window) but handle is $(handle)";
    mouse-pos = vec2i(x, y);
  }
  void mousebutton(GLFWWinType window, int button, action, mods) {
    if (window != handle) raise new Error "Called mousebutton() with $(window) but handle is $(handle)";
    if (action) buttons[button].(clicked, pressed) = (true, true);
    else buttons[button].(released, pressed) = (true, false);
  }
  void scroll(GLFWWinType window, double x, y) {
    scroll-state += vec2i(int:x, int:y);
  }
  void closedfn(GLFWWinType window) { closed = true; }
  bool is-set-up, closed, debugflag;
  string title;
  void setTitle(string s) {
    import std.string;
    handle.glfwSetWindowTitle(auto ptr = toStringz s);
    mem.free ptr;
  }
  void setDebugFlag(bool d) { debugflag = d; }
  void setup(vec2i size) using mode GLFW {
    if (!Init()) raise new GLFWError "Failed to init GLFW";
    onFailure Terminate;
    
    SetErrorCallback &HandleError;
    
    WindowHint(DEPTH_BITS, 16);
    WindowHint(STENCIL_BITS, 8);
    WindowHint(OPENGL_DEBUG_CONTEXT, debugflag);
    
    (w, h) = size;
    if (!title) title = "GLFW Window";
    
    windowSizeCallback = &reshape;
    keyCallback = &key;
    charCallback = &handleChar;
    cursorPosCallback = &mousepos;
    mouseButtonCallback = &mousebutton;
    scrollCallback = &scroll;
    windowCloseCallback = &closedfn;
    
    import std.string;
    handle = CreateWindow (w, h, toStringz title, null, null);
    if (!handle) raise new GLFWError "Failed to open GLFW window with $size";
    MakeContextCurrent handle;
    
    initCallbacks handle;
    
    glGetIntegerv(GL_STENCIL_BITS, &int stencil);
    if (stencil < 8) raise new GLFWError "Unable to create GLFW window with 8 stencil bits: only got $stencil";
    glGetIntegerv(GL_DEPTH_BITS, &int depth);
    if (depth < 16) raise new GLFWError "Unable to create GLFW window with 16 depth buffer bits: only got $depth";
    
    // handle.SetInputMode (REPEAT, true);
    // SwapInterval 0;
    
    is-set-up = true;
    context-callbacks.call();
  }
  bool isSetUp() { return is-set-up; }
  void update() using mode GLFW {
    super.update();
    for ref button <- buttons {
      button.(clicked, released) = (false, false);
    }
    // once-off events; reset to false
    key-pressed[] = [for key-pressed: false];
    key-released[] = [for key-released: false];
    key-repeated[] = [for key-repeated: false];
    scroll-state = vec2i 0;
    SwapBuffers handle;
    PollEvents;
    if (queuedInput) onTextInput.call queuedInput;
    queuedInput = null;
    if (closed) raise new WindowClosed "GLFW exit";
    // if (!IsWindow(handle)) raise new WindowClosed "GLFW exit";
  }
  void close() using mode GLFW {
    // handle.CloseWindow();
    writeln "TODO";
  }
  void warp(vec2i to) using mode GLFW {
    handle.SetCursorPos to;
    mouse-pos = to;
  }
  bool claimed;
  vec2i prev-pos;
  void claim-cursor() using mode GLFW {
    prev-pos = mouse-pos;
    handle.SetInputMode(CURSOR, CURSOR_DISABLED); // replaces CAPTURED
    warp $ size() / 2;
    claimed = true;
  }
  void release-cursor() using mode GLFW {
    handle.SetInputMode(CURSOR, CURSOR_NORMAL);
    warp $ prev-pos;
    claimed = false;
  }
  bool cursor-claimed() { return claimed; }
}
