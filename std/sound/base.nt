module std.sound.base;

alias Sample = short;

abstract class SoundOutput {
  void open();
  void close();
  Sample[] copydump;
  void writeCopydump(int len);
  void dump(Sample delegate(int) dg, int newlen, float mult = 1f) {
    if (copydump.length < newlen) { copydump.free; copydump = new Sample[] newlen; }
    for int i <- 0..newlen {
      auto value = Sample:short:int:(dg(i) * mult);
      copydump[i] = value;
    }
    writeCopydump(newlen);
  }
  void dump(Sample[] data, float mult = 1f) {
    if (copydump.length < data.length) { copydump.free; copydump = new Sample[] data.length; }
    if (mult != 1f)
      for int i <- 0..data.length
        copydump[i] = Sample:short:int:(data[i]*mult);
    else
      copydump[0..data.length] = data[];
    writeCopydump(data.length);
  }
}
