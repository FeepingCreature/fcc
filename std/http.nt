/* Title: std.http
Simple HTTP processing */
module std.http;

import std.string, std.socket;

class DownloadError : Error {
  void init(string url, string msg) { super.init "While downloading '$url:' $msg"; }
}

import c.stdio;
/* Function: download
Download a site. HTTP/1.0, very WIP.

Parameters:
url - URL
onRedirect - Called when the request is redirected */
byte[] download(string url, void delegate(string) onRedirect = null) {
  auto original-url = url;
  {
    string rest = url.startsWith("http://");
    if !rest raise new DownloadError(url, "Unknown protocol (forgot http://?)");
    url = rest;
  }
  (string domain, url) = slice (url, "/");
  url = "/" ~ url;
  (domain, string portstr) = slice (domain, ":");
  short port = 80;
  if portstr.length port = short:portstr.atoi();
  auto sock = connect(domain, port);
  void sendLine(string line) {
    sock.sendAll byte[]:line;
    sock.sendAll byte[]:"\r\n";
  }
  sendLine "GET $url HTTP/1.0";
  sendLine "Host: $domain";
  sendLine "";
  auto response = string: join readsocket sock;
  string headerstr = slice(&response, "\r\n\r\n");
  if (headerstr.find("Location: ")) {
    auto url2 = original-url.followLink headerstr.between("Location: ", "\r\n");
    if (onRedirect) { onRedirect url2; }
    return download url2;
  }
  auto header = headerstr.split "\r\n";
  return byte[]:response;
}

(byte[], string)[auto~] cache;
/* Function: downloadCached
Like <download>, but cached. Self-explanatory. */
byte[] downloadCached(string url, void delegate(string) onRedirect = null) {
  for auto tup <- cache
    if tup[1] == url return tup[0];
  
  auto res = download (url, onRedirect);
  cache ~= (res, url);
  return res;
}

/*Function: followLink
Returns the combined URL of the two parameters. For instance, if *from* is "google.de/webhp" and *to* is "/search", the result is "google.de/search".*/
string followLink(string from, string to) {
  if to.startsWith "http://" return to;
  if !from.startsWith "http://" raise new Error "'$from' is not a valid HTTP URL! ";
  if to.startsWith "/"
    return "http://" ~ from.between("http://", "/") ~ to;
  int pos_param = from.find("?");
  if pos_param == -1 pos_param = from.length;
  auto pos_last_slash = from[7..pos_param].rfind("/");
  if pos_last_slash == -1 raise new Error "No separator slash in $from! ";
  return from[0..pos_last_slash + 7 + 1] ~ to;
}
