/*Title: std.zlib
Wrapper around the zlib compression library*/
module std.zlib;

import c.zlib;

pragma(lib, "z");

/*Class: Deflate
Compression*/
class Deflate {
  z_stream stream;
  /*Function: init*/
  void init() {
    auto ret = deflateInit_(&stream, 6, ZLIB_VERSION, size-of z_stream);
    if ret != Z_OK raise-error new Error "ZLIB init error $ret (version '$ZLIB_VERSION')";
  }
  /*Function: fini*/
  void fini() {
    auto ret = deflateEnd(&stream);
    if ret != Z_OK raise-error new Error "ZLIB fini error $ret (version '$ZLIB_VERSION')";
  }
  /*Function: deflate
  Deflate the argument, returning the compressed data. Stream is flushed at the end. */
  byte[] deflate(byte[] data) {
    byte[auto~] res;
    byte x 1024 buffer = void;
    stream.(avail_in, next_in) = (data.length, char*:data.ptr);
    do {
      stream.(avail_out, next_out) = (buffer.length, char*:buffer.ptr);
      // stream.(avail_out, next_out) = (buffer.length, char*:buffer.ptr);
      auto ret = c.zlib.deflate(&stream, Z_FINISH);
      if (ret == -2) raise-error new Error "ZLIB deflate error $ret";
      int got = buffer.length - stream.avail_out;
      res ~= buffer[0..got];
    } while (stream.avail_out < buffer.length || stream.avail_in) { }
    return res[];
  }
}

/*Class: Inflate
Decompression*/
class Inflate {
  z_stream stream;
  /*Function: init*/
  void init() {
    auto ret = inflateInit_(&stream, ZLIB_VERSION, size-of z_stream);
    if ret != Z_OK raise-error new Error "ZLIB init error $ret (version '$ZLIB_VERSION')";
  }
  /*Function: fini*/
  void fini() {
    auto ret = inflateEnd(&stream);
    if ret != Z_OK raise-error new Error "ZLIB fini error $ret (version '$ZLIB_VERSION')";
  }
  /*Function: inflate
  Inflate the argument, returning the decompressed data. Stream is flushed at the end. */
  byte[] inflate(byte[] data) {
    byte[auto~] res;
    byte x 1024 buffer = void;
    stream.(avail_in, next_in) = (data.length, char*:data.ptr);
    do {
      stream.(avail_out, next_out) = (buffer.length, char*:buffer.ptr);
      auto ret = c.zlib.inflate(&stream, Z_FINISH);
      if ret == -2 raise-error new Error "ZLIB deflate error $ret";
      int got = buffer.length - stream.avail_out;
      res ~= buffer[0..got];
    } while (stream.avail_out < buffer.length || stream.avail_in) {  }
    return res[];
  }
}

/*Section: std.zlib*/

/*Function: deflate
Deflates the argument, returning the compressed version*/
byte[] deflate(byte[] data) using new Deflate {
  onSuccess fini();
  return deflate data;
}

/*Function: inflate
Inflates the argument, returning the decompressed version*/
byte[] inflate(byte[] data) using new Inflate {
  onSuccess fini();
  return inflate data;
}
