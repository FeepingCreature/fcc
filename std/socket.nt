/*Title: std.socket
Wraps the BSD Sockets API*/
module std.socket;

import std.string, c.unistd, c.sys.socket, c.sys.types, c.netdb, c.string, c.errno;

/*Class: Address
An internet address*/
class Address {
  (sockaddr*, int) getAddrHandle() { raise new Error "getAddrHandle not implemented"; return (sockaddr*:null, 0); }
  Address dup() { raise new Error "dup not implemented"; }
}

/*Class: TcpAddress
A TCP address*/
class TcpAddress : Address {
  sockaddr_in saddr;
  (sockaddr*, int) getAddrHandle() {
    return (sockaddr*:&saddr, size-of sockaddr_in);
  }
  Address dup() using new TcpAddress {
    saddr = this.saddr;
    return that;
  }
  void init() { }
  /*Function: init
  Create a TCP address from host name and port*/
  void init(string dns, short port) {
    auto he = gethostbyname(toStringz(dns));
    using saddr {
      sin_addr.s_addr = *uint*:he.h_addr_list[0];
      sin_family = AF_INET;
      sin_port = htons(port);
    }
  }
}

alias __NFDBITS = 8 * size-of __fd_mask;
__fd_mask __FDMASK(int d) { return __fd_mask: (1 << (d % __NFDBITS)); }
void __FD_SET(int d, fd_set* set) { set.__fds_bits[d / __NFDBITS] |= __FDMASK d; }
bool __FD_ISSET(int d, fd_set* set) { return eval set.__fds_bits[d / __NFDBITS] & __FDMASK d; }
alias FD_SET = __FD_SET;
alias FD_ISSET = __FD_ISSET;

/*Class: Socket
A BSD Socket*/
class Socket {
  int sockfd;
  Address boundAddr;
  /*Function: close*/
  void close() {
    c.unistd.close(sockfd);
  }
  /*Function: init*/
  void init() {
    sockfd = socket (AF_INET, SOCK_STREAM, 0);
  }
  /*Function: reuse
  Marks the socket as reusable*/
  void reuse(bool b) {
    setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &b, size-of bool);
  }
  // alias isOpen = sockfd;
  /*Function: open*/
  void open(TcpAddress ta) {
    auto res = c.sys.socket.connect (sockfd, sockaddr*:&ta.saddr, size-of type-of ta.saddr);
  }
  /*Function: recv
  Fills the argument with data from the socket, returning the number of bytes received. */
  int recv(byte[] buf) {
    auto res = .recv(sockfd, buf.ptr, buf.length, 0);
    if (res <= 0) {
      close;
    }
    return res;
  }
  /*Function: send
  Sends some of the argument, returning the number of bytes sent. */
  int send(byte[] buf) {
    auto res = .send(sockfd, buf.ptr, buf.length, 0);
    if (res <= 0) {
      close;
    }
    return res;
  }
  /*Function: sendAll
  Sends all of the argument*/
  void sendAll(byte[] buf) {
    while buf.length {
      auto res = send buf;
      if (res <= 0) return;
      buf = buf[res .. $];
    }
  }
  /*Function: bind
  Bind the socket to an address*/
  void bind(Address addr) {
    boundAddr = addr;
    auto err = .bind(sockfd, addr.getAddrHandle());
    if (err == -1)
      raise new Error "While binding to $addr: $(CToString strerror errno)";
  }
  /*Function: listen
  Listen for incoming connections */
  void listen(int backlog = 4) {
    auto err = .listen(sockfd, backlog);
    if (err == -1)
      raise new Error "While trying to listen: $(CToString strerror errno)";
  }
  /*Function: accept
  Once incoming connections occur, return a socket for them*/
  Socket accept() using new Socket {
    boundAddr = this.boundAddr.dup;
    auto hdl = boundAddr.getAddrHandle();
    int gotLength = hdl[1];
    sockfd = .accept(this.sockfd, hdl[0], &gotLength);
    if (sockfd == -1) {
      raise new Error "While accepting connections on $(this.sockfd): $(CToString strerror errno)";
    }
    if (gotLength != hdl[1])
      raise new Error "Accepted socket address was of different type than listening socket: $gotLength, but expected $(hdl[1])! ";
    return that;
  }
}

/*Section: std.socket*/
/*Function: connect
Open a socket for the given domain/port*/
Socket connect(string domain, short port) using new Socket {
  open new TcpAddress(domain, port);
  return that;
}

extern(C) {
  int getpeername(int,sockaddr*,int*);
  char *inet_ntoa(in_addr);
}
(string,int) peernameof(Socket s) {
  sockaddr_in a;
  int l = size-of sockaddr_in;
  if getpeername(s.sockfd,sockaddr*:&a,&l) != 0
    raise new Error "Unable to get peer name: $(CToString strerror errno)";
  auto x = CToString inet_ntoa(a.sin_addr);
  auto y = ntohs(a.sin_port);
  return (x,y);
}

string ipof (Socket s)
  return peernameof(s)[0];

/*Template: readsocket
Returns an iterator that yields data received from the socket argument*/
template readsocket(T) {
  class sockreader : Iterator!byte[] {
    Socket sock;
    bool done;
    byte x 256  buf;
    bool advance() {
      auto size = sock.recv buf[];
      if size <= 0 return false;
      value = buf[0 .. size];
      return true;
    }
  }
  sockreader readsocket(T t) using new sockreader {
    sock = t;
    return that;
  }
}

/*Struct: SelectSet
Allows waiting on multiple sockets*/
struct SelectSet {
  fd_set rdset, wrset, errset;
  int largest;
  /*Function: add
  Add a socket to the set*/
  void add(Socket sock, bool read = false, bool write = false, bool error = false) {
    auto sockfd = sock.sockfd;
    if read  FD_SET(sockfd, &rdset);
    if write FD_SET(sockfd, &wrset);
    if error FD_SET(sockfd, &errset);
    if sockfd > largest largest = sockfd;
  }
  /*Function: isReady
  Check if the socket is ready. Must follow a call to select(). Socket must have been added. */
  bool isReady(Socket sock, bool read = false, bool write = false, bool error = false) {
    auto sockfd = sock.sockfd;
    if  read && FD_ISSET(sockfd, &rdset) return true;
    if write && FD_ISSET(sockfd, &wrset) return true;
    if error && FD_ISSET(sockfd, &errset)return true;
    return false;
  }
  /*Function: select
  Wait until one of the sockets changes state. */
  /*void select(float timeout = 30.0) {
    timeval tv;
    tv.tv_sec = int:timeout;
    tv.tv_usec = int:((timeout - tv.tv_sec) * 1_000_000);
    auto res = .select(largest + 1, &rdset, &wrset, &errset, &tv);
    if (res == -1) raise new Error "While trying to select: $(CToString strerror errno)";
  }*/
  void select(int timeout = 30_000_000) {
    timeval tv;
    tv.tv_sec = timeout / 1_000_000;
    tv.tv_usec = timeout - tv.tv_sec * 1_000_000;
    auto res = .select(largest + 1, &rdset, &wrset, &errset, &tv);
    if (res == -1) raise new Error "While trying to select: $(CToString strerror errno)";
  }
}

