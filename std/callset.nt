module std.callset;

/**
  Usage:
    CallSet!void foo;
    ...
    foo.add \{};
    foo.call();
**/

template CallSet(T) {
  auto helper() {
    static if (types-equal (T, void)) { return \() { }; }
    else { return \(T t) { }; }
  }
  alias callset-str = `
    template CallSet(U) {
      struct CallSet {
        alias DG = type-of helper();
        DG[auto~] dgs;
        void call(%ARG%) {
          for auto dg <- dgs dg?(%ARGVAL%);
        }
        void add(DG dg) {
          for ref dg2 <- dgs
            if (!dg2) { dg2 = dg; return; }
          dgs ~= dg;
        }
        void remove(DG dg) {
          for ref dg2 <- dgs
            if ((void*,void*):dg == (void*,void*):dg2) dg2 = null;
        }
      }
    }
  `;
  mixin(callset-str.replace("CallSet","CallSetA").replace("%ARG%","").replace("%ARGVAL%", ""));
  mixin(callset-str.replace("CallSet","CallSetB").replace("%ARG%","T t").replace("%ARGVAL%", "t"));
  auto helper2() {
    static if (types-equal(T, void)) {
      return CallSetA!(int) A;
    } else {
      return CallSetB!(int) B;
    }
  }
  alias CallSet = type-of helper2();
}
