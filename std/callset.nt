module std.callset;

/**
  Usage:
    CallSet!void foo;
    ...
    foo.add \{};
    foo();
**/

template CallSet(T) {
  static if (types-equal (T, void)) {
    alias DG = void delegate();
  } else {
    // alias DG = void delegate(T);
    auto foob() { return Î»(T) { }; }
    alias DG = type-of __internal_flatten foob(); // HAAAAX
  }
  alias callset-str = `
    template CallSet(U) {
      struct CallSet {
        DG[auto~] dgs;
        int linkedstart;
        alias lsvalue = linkedstart - 1; // so that default (0) becomes -1
        void setls(int i) { linkedstart = i + 1; }
        void call(%ARG%) {
          // data may be nonnull because linked freelist hack
          for auto dg <- dgs if (dg.fun !is null) dg(%ARGVAL%);
        }
        alias implicit-cast = &call;
        int add(DG dg) {
          // if freelist is not empty
          if (lsvalue != -1) {
            // save current freelist head
            int curhead = lsvalue;
            ref listdg = dgs[lsvalue];
            // unwrap linked list
            // (set the new head)
            setls int:listdg.data;
            listdg = dg;
            // return id we saved to
            return curhead;
          }
          // otherwise append
          dgs ~= dg;
          // and return end
          return dgs.length - 1;
        }
        void remove(int id) {
          ref thatdg = dgs[id];
          // use the dg we just removed as the current freelist head
          thatdg.fun = null;
          // point at the previous freelist head
          thatdg.data = void*: lsvalue;
          // and set id
          setls id;
        }
        void clear() {
          linkedstart = 0;
          dgs.clear; // keep capacity, reset length
        }
        void remove(DG dg) {
          for int i <- ints && ref dg2 <- dgs {
            if (dg is dg2) {
              remove i;
              return;
            }
          }
        }
      }
    }
  `;
  mixin(callset-str.replace("CallSet","CallSetA").replace("%ARG%","").replace("%ARGVAL%", ""));
  mixin(callset-str.replace("CallSet","CallSetB").replace("%ARG%","T t").replace("%ARGVAL%", "t"));
  static if (types-equal(T, void)) {
    alias CallSet = CallSetA!(int);
  } else {
    alias CallSet = CallSetB!(int);
  }
}
