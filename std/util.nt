/*Title: std.util
Iterator-related helper functions*/
module std.util;

template Maybe(T) {
  struct Maybe {
    T value;
    bool valid;
    T getvalue() { assert valid; return value; }
    string toString() { if (valid) return "Just $value"; else return "Nothing"; } // oh haskell~
    alias implicit-cast = valid;
    alias implicit-cast-2 = getvalue();
  }
}

/*Template: once
For any value, forms an iterator that yields only that value, exactly once. */
template once(T) {
  class one : Iterator!T {
    bool done;
    bool advance() {
      if done return false;
      done = true;
      return true;
    }
  }
  auto once(T t) {
    auto res = new one;
    res.value = t;
    return res;
  }
}

/*Template: iterFrom
Skips the first n values from the iterator */
template iterFrom(T) {
  class from : Iterator!type-of-elem T[0] {
    int count;
    type-of (*T[0]*:null).iterator iter;
    void init(T t) { iter = t[0].iterator; count = t[1]; }
    bool advance() {
      for value <- iter {
        if (count) count --;
        else return true;
      }
      return false;
    }
  }
  from iterFrom(T t) {
    return new from t;
  }
}

template iteratorType(T) {
  alias iteratorType = type-of value-of!T.iterator;
}

/*Template: loop
Loops the argument infinitely. Argument must have value semantics! */
template loop(T) {
  class loopclass {
    T safeCopy;
    iteratorType!T running, iter;
    type-of-elem value-of!T value;
    bool advance() {
      if !(value <- running) {
        running = iter;
        if !(value <- running) {
          raise new Error "Unable to restore iterator in loop iter! ";
        }
      }
      return true;
    }
  }
  loopclass loop(T t) {
    auto res = new loopclass;
    res.safeCopy = t;
    res.iter = type-of res.iter: res.safeCopy.iterator;
    res.running = type-of res.running: res.safeCopy.iterator;
    return res;
  }
}

template UnreliableIterator(T) {
  class UnreliableIterator : Iterator!T {
    bool canAdvance() { raise new Error "$this: UnreliableIterator::canAdvance not implemented!"; }
  }
}

/*Template: FeedIterator
A buffer iterator. Yields elements that have been put into it with write(T). 
*/
template FeedIterator(T) {
  class FeedIterator : UnreliableIterator!T {
    T[auto~] source;
    int offset;
    void write(T t) { source ~= t; }
    bool canAdvance() { return source.length > 0; }
    bool advance() {
      if (offset >= source.length) raise new BoundsError "Feed iterator: buffer empty";
      value = source[offset];
      
      offset = offset + 1;
      
      return true;
    }
  }
}

template flatten(T) {
  template Flatten(T) {
    class Flatten : Iterator!T {
      Iterator!T[] sup;
      T[] backing; // no need to free backing[], it's owned by sup
      void init(Iterator!T[] s) { sup = s; }
      // take i elements
      T[] take(int i) {
        T[auto~] res;
        while (i) {
          if (!backing.length) {
            if (!sup || !backing <- sup) { fail "ran out of data on the sup iterator while taking $i"; }
          }
          int to_take = min(i, backing.length);
          T[] taken;
          (taken, backing) = backing[(0..to_take, to_take..$)]
          res ~= taken;
          i -= to_take;
        }
        return res[];
      }
      // get an iterator like the original one, resuming where take and advance left off
      /* we don't need to dup backing, because we'll only touch sup when backing is already used */
      Iterator!T[] rest() { return wrap!T[](cat(once backing[], sup)); }
      bool advance() {
        if (!backing.length) {
          if (!sup || !backing <- sup) { sup = null; return false; }
        }
        (value, backing) = backing[(0, 1..$)];
        return true;
      }
    }
  }
  auto flatten(T t) {
    alias Elem = type-of-elem value-of!type-of-elem t;
    return new Flatten!Elem(t);
  }
}

/*Template: take
Takes a number of elements from an iterator and returns them as an array. */
template take(T) {
  auto take(T t) {
    alias Elem = type-of-elem t[0];
    Elem[auto~] res;
    for 0..t[1] {
      if auto val <- t[0] res ~= val;
      else raise new BoundsError "Not enough elements available to take $(t[1])";
    }
    return res[];
  }
}

/// head frees the input iterator!!
template head(T) {
  auto head(T t) {
    if auto val <- t {
      using t static if (is-defined local free) {
        free;
      }
      return val;
    } else raise new BoundsError "No elements left in $t";
  }
}

template tail(T) {
  T tail(T t) {
    static if (type-is array T) {
      return t[1..$];
    } else {
      assert !! auto ignore <- t; return t;
    }
  }
}

macro("tree.expr.flatten_tuple", "331", "__flatten_tuple") `
  (last
    (def 'tup (parse-tuple))
    (def 'unroll (lambda '(e)
      '(if (not (is-tuple e))
        'e
        '(for (tuple-exprs e) 'e2 '(unroll e2)))))
    (make-tuple-expr (flatten (unroll tup))))
`;

template apply(T) {
  auto apply(T t) {
    alias FT = T[1];
    alias PT = ParamTypes FT;
    // pragma(msg, string-of PT);
    alias pt = value-of!PT;
    alias T0 = T[0];
    alias t0 = value-of!T0;
    static if (type-is tuple PT) {
      static if (type-is tuple T0) {
        alias Rest = type-of pt[t0.length..pt.length];
      } else {
        alias Rest = type-of pt[1..pt.length];
      }
      // HUGE-ASS HACK!! 
      return __internal_flatten new \(Rest rest) {
        // pragma(msg, string-of type-of t[1]~" # "~string-of type-of (__flatten_tuple (t[0], rest)));
        return t[1] (__flatten_tuple (t[0], rest));
      }
    } else {
      return new \{ return t[1] t[0]; }
    }
  }
}

template rapply(T) {
  auto rapply(T t) {
    alias FT = T[1];
    alias PT = ParamTypes FT;
    // pragma(msg, string-of PT);
    alias pt = value-of!PT;
    static if (type-is tuple PT) { alias Rest = type-of pt[0..pt.length-1]; }
    else { alias Rest = type-of (); }
    return new \(Rest rest) {
      // pragma(msg, string-of type-of t[1]~" # "~string-of type-of (__flatten_tuple (t[0], rest)));
      return t[1] (__flatten_tuple (rest, t[0]));
    }
  }
}

template reverse(T) {
  alias IT = type-of-elem T;
  struct rev {
    IT value;
    int pos;
    IT[] back;
    bool allocatedBack;
    void free() { if (allocatedBack) { back.free; allocatedBack = false; } }
    bool advance() {
      if (pos == -1) { free; return false; }
      value = back[pos];
      pos--;
      if (pos == -1 && allocatedBack) free;
      return true;
    }
  }
  auto reverse(T t) {
    rev r;
    static if (implicitly-converts-to IT[] t) {
      r.(back, allocatedBack) = (t, false);
    } else {
      static if (implicitly-converts-to IT[auto~] t || implicitly-converts-to IT[~] t) {
        r.(back, allocatedBack) = (t[], false);
      } else {
        r.(back, allocatedBack) = (t.iterator.eval[], true);
      }
    }
    r.pos = r.back.length - 1;
    return r;
  }
}

template maximize(T) {
  auto maximize(T pair) {
    static if (pair.length != 2) {
      pragma(fail, ("maximize must take two parameters, not "~string-of T));
    }
    float max = -float.max;
    type-of-elem pair[0] res;
    bool succeeded;
    for auto value <- pair[0] if ((auto v = pair[1] value) > max) {
      max = v;
      res = value;
      succeeded = true;
    }
    return Maybe!type-of res: (res, succeeded);
  }
}

template minimize(T) {
  auto minimize(T pair) {
    static if (pair.length != 2) {
      pragma(fail, ("minimize must take two parameters, not "~string-of T));
    }
    float min = float.max;
    type-of-elem pair[0] res;
    bool succeeded;
    for auto value <- pair[0] if ((auto v = pair[1] value) < min) {
      min = v;
      res = value;
      succeeded = true;
    }
    return Maybe!type-of res: (res, succeeded);
  }
}

// list.findFirstThat condition
template findFirstThat(T) {
  alias Element = type-of-elem T[0];
  auto findFirstThat(T pair) {
    for auto value <- pair[0] if (pair[1] value) return Maybe!Element: (value, true);
    return Maybe!Element: (Element throwaway, false);
  }
}

/*Template: takeUntil
  Terminate an iterator when a condition is fulfilled
  Usage: takeUntil(iterator, condition)*/
template takeUntil(T) {
  struct takeUntilStrct {
    T[0] subiter;
    T[1] test;
    bool done;
    type-of-elem T[0] value;
    bool advance() {
      if done return false;
      if value <- subiter {
        if (test value) { done = true; return false; }
        return true;
      }
      done = true; return false;
    }
  }
  auto takeUntil(T t) {
    static if (t.length != 2) { pragma(fail, "takeUntil expected two parameters, (iterator, condition): "~string-of T); }
    takeUntilStrct res;
    res.(subiter, test) = t;
    return res;
  }
}

template roll(T) {
  alias E = type-of-elem value-of!T;
  struct rolliter {
    bool left; 
    E subst;
    E value;
    type-of (value-of!T).iterator sup;
    int stepid, width;
    bool done;
    bool advance() {
      if (done) return false;
      if (left) {
        if (stepid == 0) {
          // throw one away
          if (!auto bogus <- sup) { done = true; return false; }
        }
        if (stepid == width - 1) {
          value = subst;
          stepid = 0;
        } else {
          if (auto v <- sup) {
            value = v;
            stepid ++;
          } else {
            done = true;
            return false;
          }
        }
      } else {
        if (stepid == 0) {
          value = subst;
          stepid ++;
          return true;
        }
        if (auto v <- sup) {
          value = v;
        } else {
          done = true;
          return false;
        }
        if (stepid == width - 1) {
          // discard one
          if (!auto bogus <- sup) { done = true; return false; }
          stepid = 0;
        } else {
          stepid ++;
        }
      }
      return true;
    }
  }
  struct rollwrap {
    T t;
    auto opCall(E subst, int width, bool left) {
      rolliter r;
      r.(left, subst, sup, width) = (left, subst, t.iterator, width);
      return r;
    }
  }
  auto roll(T t) { return rollwrap:t; }
}

template breakIter(T) {
  class BreakIterator : Iterator!T {
    Iterator!void[] sup;
    void[auto~] buffer;
    int offset;
    alias buffer_left = buffer[offset .. $];
    bool sup_done;
    void init(Iterator!void[] sup) { this.sup = sup; }
    override void free() {
      buffer.free;
      super.free();
    }
    bool advance() {
      import c.string;
      alias sz = size-of T;
      void smart_append(void[] v) {
        bool tryit() {
          if (offset + v.length <= buffer.capacity) {
            buffer ~= v; // still got enough space
            return true;
          }
          return false;
        }
        if (tryit()) return;
        if (offset) {
          // recompress
          memmove(buffer.ptr, buffer_left.(ptr, length));
          buffer.length -= offset;
          offset = 0;
          if (tryit()) return;
        }
        buffer ~= v;
      }
      while (buffer_left.length < sz) {
        if (sup_done) {
          if (!buffer_left.length) { free; return false; }
          raise new Error "BreakIterator length mismatch: currently available $(buffer_left.length) (and sup is done), but size of $(string-of T) is $sz";
        }
        if (auto nval <- sup) smart_append(nval);
        else sup_done = true;
      }
      value = *T*: buffer_left.ptr;
      offset += sz;
      return true;
    }
  }
  auto breakIter(Iterator!void[] sup) {
    return new BreakIterator sup;
  }
}

import std.hashmap;
template uniq(T) {
  alias E = type-of-elem T;
  alias I = type-of value-of!T.iterator;
  class UniqIter : Iterator!E {
    I sup;
    Hashset!E seen;
    bool done;
    bool advance() {
      if done return false;
      while true {
        if !(this.value <- sup) { done = true; seen.free; return false; }
        if (!seen.has this.value) {
          seen.add this.value;
          return true;
        }
      }
    }
    void init(I sup) { this.sup = sup; }
  }
  auto uniq(T t) {
    return new UniqIter t.iterator;
  }
}
