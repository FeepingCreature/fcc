module std.util;

template iterOnce(T) {
  class one : Iterator!T {
    bool done;
    bool advance() {
      if done return false;
      done = true;
      return true;
    }
  }
  one iterOnce(T t) {
    auto res = new one;
    res.value = t;
    return res;
  }
}

template iteratorType(T) {
  alias iteratorType = type-of value-of!T.iterator;
}

template loop(T) {
  class loopclass {
    iteratorType!T running, iter;
    type-of-elem value-of!T value;
    bool advance() {
      if !(value <- running) {
        running = iter;
        if !(value <- running) {
          raise-error new Error "Unable to restore iterator in loop iter! ";
        }
      }
      return true;
    }
  }
  loopclass loop(T t) {
    auto res = new loopclass;
    res.iter = type-of res.iter: t.iterator;
    res.running = type-of res.running: t.iterator;
    return res;
  }
}
