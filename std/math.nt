/*Title: std.math
Math functions */
module std.math;

import c.math;

/*Function: cross3f
The vector cross product*/
vec3f cross3f(vec3f a, vec3f b) { return a.yzx * b.zxy - a.zxy * b.yzx; }

/*Function: sqrt
Square root. Gets inlined. */
float sqrt(float f) {
  short status;
  float local = f;
  asm "fld (%esp)";
  asm "fsqrt";
  asm "fxam";
  asm "fstsw 6(%esp)";
  asm "fstp (%esp)";
  if (status & 0b0000_0101__0000_0000 == (0b101 << 8)) { int i = 0; i /= i; } // infty
  return local;
}

/*Function: angle3f
Angle between two vectors, optionally in reference to a third vector */
float angle3f(vec3f v, vec3f to, vec3f refer = vec3f(0)) {
  // yay, http://tomyeah.com/signed-angle-between-two-vectors3d-in-cc/
  auto v1 = v.cross3f(to) * refer;
  bool flipped = eval (v1.sum < 0);
  auto res = acosf((v*to).sum / sqrt(v.selfdot * to.selfdot));
  // fudge
  if (flipped) res = -res;
  return res;
}

/*Function: rotate3f
Rotates *vec* around *axis* by *angle*. */
vec3f rotate3f(vec3f vec, vec3f axis, float angle) using vec {
  float u = axis.x, v = axis.y, w = axis.z;
  float uu = u*u, vv = v*v, ww = w*w;
  float v_w = vv + ww, u_w = uu + ww, u_v = uu + vv;
  float dd = (vec*axis).sum, cosa = cosf(angle), sina = sinf(angle);
  vec3f res = void;
  // pathologically slow to parse
  /*res = axis * dd
    + (vec * vec3f(v_w, u_w, u_v) + axis * (axis.yxx*(-vec.yxx) + axis.zzy * (-vec.zzy))) * cosa
    + (axis.zzy * vec3f (vec.(-y, x, -x)) + axis.yxx * vec3f(vec.(z, -z, y))) * sina;*/
  res.x = u*dd+(x*v_w+u*(v*(-y)+w*(-z))) * cosa + (w*(-y)+v*z) * sina;
  res.y = v*dd+(y*u_w+v*(u*(-x)+w*(-z))) * cosa + (w*x+u*(-z)) * sina;
  res.z = w*dd+(z*u_v+w*(u*(-x)+v*(-y))) * cosa + (v*(-x)+u*y) * sina;
  res /= axis.lensq;
  return res;
}

/*Function: sin
The sine function*/
float sin(float f) {
  short status;
  float local = f;
  asm "fld (%esp)";
  asm "fxam";
  asm "fstsw 6(%esp)"; // 4-aligned
  if (status & 0b0000_0101__0000_0000 == 0b101 << 8) { int i = 0; i /= i; } // infty
  asm "fsin";
  asm "fstsw 6(%esp)"; // also 4-aligned
  asm "fstp (%esp)";
  if (status & 0b0000_0100__0000_0000) { int i = 0; i /= i; }
  return local;
}

/*Function: cos
The cosine function*/
float cos(float f) {
  short status;
  float local = f;
  asm "fld (%esp)";
  asm "fxam";
  asm "fstsw 6(%esp)"; // 4-aligned
  if (status & 0b0000_0101__0000_0000 == 0b101 << 8) { int i = 0; i /= i; } // infty
  asm "fcos";
  asm "fstsw 6(%esp)"; // 4-aligned
  asm "fstp (%esp)";
  if (status & 0b0000_0100__0000_0000) { int i = 0; i /= i; }
  return local;
}

/*Function: half
Convenience wrapper*/
vec2f half(vec2f a, b) return (a + b) / 2;
/*Function: half
Convenience wrapper*/
vec3f half(vec3f a, b) return (a + b) / 2;
/*Function: half
Convenience wrapper*/
vec4f half(vec4f a, b) return (a + b) / 2;

/*Function: is-nan
Tests if its argument is the floating-point special value NaN*/
bool is-nan(float f) {
  int i = *int*:&f;
  return eval (i & 0x7fff_ffff) > 0x7f80_0000;
}

extern(C) {
  float floorf(float x);
  float ceilf(float x);
}

/*Function: floor*/
float floor(float x) { return floorf x; }
/*Function: ceil*/
float ceil(float x) { return ceilf x; }
/*Function: atan*/
float atan(float x) { return atanf x; }

/*Function: abs*/
int abs(int i) { if i < 0 return -i; return i; }
/*Function: abs*/
float abs(float f) { if f < 0 return -f; return f; }

/*Alias: PI*/
alias PI = 3.1415926538;
/*Alias: PI2*/
alias PI2 = PI * 2;
/*Alias: PI180*/
alias PI180 = PI/180.0;

/*Alias: pow*/
alias pow = powf;
/*Alias: log*/
alias log = logf;
// float log(float f) { return logf f; }
// float pow(float a, b) { return powf (a, b); }
/*Alias: atan2*/
alias atan2 = atan2f;
/*Alias: asin*/
alias asin = asinf;
/*Alias: acos*/
alias acos = acosf;

/*Template: min
Returns the smaller of its two parameters*/
template min(T) { auto min(T t) { static if (t.length != 2) { Please only pass two parameters to min! } if (t[0] > t[1]) return t[1]; return t[0]; } }
/*Template: max
Returns the larger of its two parameters*/
template max(T) { auto max(T t) { static if (t.length != 2) { Please only pass two parameters to max! } if (t[0] > t[1]) return t[0]; return t[1]; } }

/*Template: minlist
Returns the smallest entry of the iterable argument*/
template minlist(T) {
  type-of-elem value-of!T minlist(T t) {
    eval auto res <- t;
    while auto r2 <- t if r2 < res res = r2;
    return res;
  }
}

/*Template: maxlist
Returns the largest entry of the iterable argument*/
template maxlist(T) {
  type-of-elem value-of!T maxlist(T t) {
    eval auto res <- t;
    while auto r2 <- t if r2 > res res = r2;
    return res;
  }
}
