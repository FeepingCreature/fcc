module std.list;

template DoubleLinkedList(T) {
  struct Data {
    T data;
    Data* prev, next;
  }
  struct DLLIterator {
    Data* cur, start;
    alias value = cur.data;
    bool advance() {
      if (!cur) cur = start;
      else cur = cur.next;
      return !!cur;
    }
  }
  struct DoubleLinkedList {
    Data* head, tail;
    alias hasData = !!head;
    alias iterator = DLLIterator:(null, tail);
    void pushHead(T t) {
      auto wasHead = head;
      head = new Data;
      head.data = t;
      head.prev = wasHead;
      if (wasHead) wasHead.next = head;
      if (!tail) tail = head;
    }
    void pushTail(T t) {
      auto wasTail = tail;
      tail = new Data;
      tail.data = t;
      tail.next = wasTail;
      if (wasTail) wasTail.prev = tail;
      if (!head) head = tail;
    }
    T popHead() {
      assert(!!head);
      auto wasHead = head, res = head.data;
      head = head.prev;
      mem.free wasHead;
      if (head) head.next = null;
      else tail = null;
      return res;
    }
    T popTail() {
      assert(!!tail);
      auto wasTail = tail, res = tail.data;
      tail = tail.next;
      mem.free wasTail;
      if (tail) tail.prev = null;
      else head = null;
      return res;
    }
  }
}

template UnrolledDoubleLinkedList(T) {
  alias PageSize = 4096;
  alias Length = PageSize / size-of T;
  struct Reference {
    T* ptr;
    alias implicit-cast = *ptr;
  }
  alias BackingT = DoubleLinkedList!(T x Length, int, int);
  alias example = *BackingT*:null;
  struct UDLLIterator {
    type-of (irefs example.iterator) rbacking;
    int i;
    alias value = *rbacking.value #[0][i];
    void init(type-of rbacking rbacking) { this.rbacking = rbacking; this.i = int.max; }
    bool advance() {
      alias rval = *rbacking.value;
      if (i != int.max) {
        i++;
        if (i < rval[2]) return true;
      }
      do {
        if (!rbacking.advance()) return false;
      } while (rval[1] == rval[2]); // skip empty entries until we reach a nonempty or the end
      // now set i to from
      i = rval[1];
      return true;
    }
  }
  struct UnrolledDoubleLinkedList {
    // data, from (inclusive), to (exclusive)
    BackingT backing;
    alias iterator = UDLLIterator:irefs backing.iterator;
    void pushHead(T t) {
      if (backing.(!hasData || head.data.(_2 == Length))) {
        T x Length init;
        backing.pushHead(init, 0, 0);
      }
      backing.head.data.(_0[_2]) = t;
      backing.head.data._2 ++;
    }
    void pushTail(T t) {
      if (backing.(!hasData || tail.data.(_1 == 0))) {
        T x Length init;
        backing.pushTail(init, Length, Length);
      }
      backing.tail.data._1 --;
      backing.tail.data.(_0[_1]) = t;
    }
    Reference getHead() {
      assert(backing.hasData);
      auto cur = backing.head;
      while (cur && cur.data.(_1 == _2)) cur = cur.prev;
      return Reference:cur.data.(&_0[_2 - 1]);
    }
    T popHead() {
      while (backing.(head && head.data.(_1 == _2))) backing.popHead;
      assert !! backing.hasData;
      backing.head.data._2 --;
      return backing.head.data.(_0[_2]);
    }
    T popTail() {
      while (backing.(tail && tail.data.(_1 == _2))) backing.popTail;
      assert !! backing.hasData;
      auto res = backing.tail.data.(_0[_1]);
      backing.tail.data._1 ++;
      return res;
    }
  }
}

alias Deque = UnrolledDoubleLinkedList;
