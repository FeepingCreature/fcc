module std.parser;

import std.string;

context parser {
  string text;
  string delegate(string) stripOverride;
  string extraIdentifierChars; // extra characters that may be part of a legal identifier
  
  (string filename, int row, int col, string text)[auto~] fragments;
  void defineFile(string file, string data) {
    for int i <- ints && auto line <- split(data, "\n") {
      fragments ~= (file, i, 0, line);
    }
  }
  (string file, int row, int col) getPos(string text) {
    for (int i=fragments.length - 1; i>=0; i--) {
      ref fragment = fragments[i];
      if (fragment.text.(size_t:ptr <= size_t:text.ptr <= size_t:(ptr + length))) {
        return (fragment.filename, fragment.row, fragment.col + (text.ptr - fragment.text.ptr));
      }
    }
    return (null, -1, -1);
  }
  
  void fail(string s) {
    auto pos = getPos(text);
    if (!pos.file) .fail("at '$text': $s");
    .fail("$(pos.file):$(pos.row + 1):$(pos.col + 1): $s");
  }
  
  
  void cleanup() {
    // strip, eat comments
    do {
      if (stripOverride) text = stripOverride text;
      else text = text.strip();
    } while (text.startsWith "/*") {
      text = text.between("*/", "");
    }
  }
  bool accept(string match, bool cleanup = true) using scoped text {
    if (cleanup) parser.cleanup;
    if (auto rest = text.startsWith(match)) text = rest;
    else return false;
    commit;
    return true;
  }
  void expect(string match) {
    if (parser.accept(match)) return;
    fail "'$match' expected";
  }
  bool done() {
    cleanup;
    return !text.length;
  }
  void expectDone() {
    if (!done()) fail "text left over";
  }
  string slice(string to) {
    cleanup;
    return .slice(&text, to);
  }
  string gotIdentifier() {
    cleanup;
    int len;
    bool checkAlphaIsh() {
      if (len >= text.length) return false;
      if ("a" <= text[len] <= "z" || "A" <= text[len] <= "Z") return true;
      if (text[len] == "_") return true;
      if (len && "0" <= text[len] <= "9") return true; // first letter must not be a digit
      if (extraIdentifierChars.find(text[len..len+1])) return true;
      return false;
    }
    while checkAlphaIsh() len ++;
    if (!len) return null;
    auto res = text[0 .. len];
    text = text[len .. $];
    return res;
  }
  bool acceptIdentifier(string identifier) using scoped text {
    if (auto match = gotIdentifier()) {
      if (match == identifier) { commit; return true; }
    }
    return false;
  }
  string getIdentifier() {
    if (auto res = gotIdentifier()) return res;
    fail "identifier expected";
  }
  string gotNumberStr() {
    cleanup;
    auto start = text;
    if (!gotNumber(&int bogus)) return null;
    return start[0 .. text.ptr - start.ptr];
  }
  bool gotDigit(int* ip) {
    alias i = *ip;
    if (!text.length) return false;
    if ("0" <= text[0] <= "9") {
      i = text[0] - "0";
      text = text[1..$];
      return true;
    }
    return false;
  }
  bool gotNumber(int* ip) using scoped text {
    cleanup;
    int res;
    bool negative;
    if (accept("-")) negative = true;
    bool mew;
    while gotDigit(&int d) { mew = true; res = res * 10 + d; }
    if (!mew) return false;
    if (negative) res = -res;
    
    *ip = res;
    commit;
    return true;
  }
  int getNumber() {
    if (gotNumber &int i) return i;
    fail "could not parse number";
  }
  bool gotFloat(float* fp) using scoped text {
    cleanup;
    if (accept("inf")) { commit; *fp = float.infinity; return true; }
    int i;
    bool negative;
    if (accept("-")) negative = true;
    if (!gotNumber(&i)) return false;
    if (!accept(".")) return false;
    double res = i, factor = 0.1;
    while gotDigit(&int d) { res += factor * d; factor /= 10; }
    if (negative) res = -res;
    *fp = float:res;
    commit;
    return true;
  }
  float getFloat() {
    if (gotFloat &float f) return f;
    fail "could not parse float";
  }
  // WARN if the string contains escaped characters, like "\"hi\"",
  // then the returned string will still be \"hi\"!
  // This is actually important so that the line/column info (once implemented)
  // will work correctly for the returned string.
  // Use unescapeString to fix.
  string gotString(string sep = "\"", bool doEscapes = true) {
    using scoped text {
      if (!accept sep) return null;
      int i;
      alias left = that[i..$];
      while (i < that.length) {
        if (left.startsWith sep) break;
        if (doEscapes && left[0] == "\\") i++;
        if (i !< that.length) fail "unfinished escape!";
        i++;
      } then return null; // eee
      auto res = that[0..i];
      that = left;
      assert accept sep;
      commit;
      return res;
    }
  }
  string getString(string sep = "\"") {
    if (auto res = gotString(sep)) return res;
    fail "string expected";
  }
  string unescapeString(string text) {
    char[auto~] res;
    int i;
    while (i < text.length) {
      if (text[i] != "\\") {
        res ~= text[i];
      } else {
        i++;
        if (i !< text.length) fail "unfinished escape!";
        auto ctrl_char = text[i];
        if (ctrl_char == "n") res ~= "\n";
        else if (ctrl_char == "r") res ~= "\r";
        else if (ctrl_char == "t") res ~= "\t";
        else res ~= ctrl_char;
      }
      i++;
    }
    return res[];
  }
}
