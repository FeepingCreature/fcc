/*Title: std.string
String handling functions*/
module std.string;

struct FindResult {
  int pos;
  alias implicit-cast = pos;
  alias implicit-cast-2 = pos != -1;
}

/*Function: find
Searches for a substring.

Returns: a value that casts to true if result was found, and to int to give the position where it was found.*/
FindResult find(string text, string match) {
  for (int i = 0; i <= text.length - match.length; ++i) {
    if (text[i .. i+match.length] == match) return FindResult:i;
  }
  return FindResult:-1;
}

/*Function: rfind
Like find, but searches from the back*/
FindResult rfind(string text, string match) {
  for (int i = text.length - match.length; i >= 0; --i) {
    if (text[i .. i+match.length] == match) return FindResult:i;
  }
  return FindResult:-1;
}

/*Function: startsWith
If *s* starts with *m*, returns the rest of *s*; otherwise, returns null. */
reassign string startsWith(string s, string m) {
  if s.length < m.length return null;
  if (s[0 .. m.length] != m)
    return null;
  return s[m.length .. s.length];
}

/*Function: endsWith
If *s* ends with *m*, returns the start of *s* up to *m*; otherwise, returns null. */
reassign string endsWith(string s, string m) {
  if s.length < m.length return null;
  if (s[$-m.length .. $] != m)
    return null;
  return s[0 .. $-m.length];
}

/*Function: between
If *s* contains *from*, and after that, *to*, return the string between *from* and *to* in *s*.
Otherwise, return null.*/
reassign string between(string s, string from, string to) {
  int pos1;
  if (from.length) pos1 = find(s, from);
  if (pos1 == -1) return null;
  s = s[pos1 + from.length .. $];
  
  int pos2 = s.length;
  if (to.length) pos2 = find(s, to);
  if (pos2 == -1) return null;
  s = s[0 .. pos2];
  
  return s;
}

/*Function: between_r
Like between, but searches for *to* first, then backwards to *from*. */
reassign string between_r(string s, string from, string to) {
  int pos2 = s.length;
  if (to.length) pos2 = find(s, to);
  if (pos2 == -1) return null;
  s = s[0 .. pos2];
  
  int pos1 = 0;
  if (from.length) pos1 = rfind(s, from);
  if (pos1 == -1) return null;
  s = s[pos1 + from.length .. $];
  
  return s;
}

/*Template: betweens
Yields all parts of the first argument that lie between the second and third arguments. */
template betweens(T) {
  class betweenIterator : Iterator!string {
    string source, from, to;
    bool advance() {
      if (!source) return false;
      if (auto s = source.between(from, to)) {
        value = s;
        source = source.(that[find(from)+from.length .. $]).(that[find(to)+to.length .. $]);
        return true;
      }
      source = null;
      return false;
    }
  }
  auto betweens(T t) using new betweenIterator {
    static if (t.length != 3) {
      pragma(msg, "Expected (string, string, string), not $(string-of T)");
      ERROR
    }
    static if (!types-equal(T, (string, string, string))) {
      pragma(msg, "Invalid types: $((string-of T[0], string-of T[1], string-of T[2]))");
      ERROR
    }
    source = t[0];
    from = t[1];
    to = t[2];
    return that;
  }
}

/*Template: join
Evaluates and concatenates the argument. */
template join(T) {
  auto join(T t) {
    static if (type-is-tuple T) {
      alias T0 = T[0];
      alias VAL = value-of!type-of-elem t[0];
      type-of VAL[0] [auto~] res;
      bool first = true;
      while auto chunk <- t[0] {
        if first first = false;
        else res ~= t[1];
        res ~= chunk;
      }
      return res[];
    } else {
      type-of (value-of!type-of-elem t)[0] [auto~] res;
      while auto chunk <- t { res ~= chunk; }
      return res[];
    }
  }
}

template wrap(T) {
  template wrap(U) {
    class Wrap : Iterator!T {
      U u;
      bool advance() { return eval value <- u; }
    }
    Iterator!T wrap(U u) { auto res = new Wrap; res.u = u; return res; }
  }
}

import std.util;
class SplitIterator : Iterator!string {
  Iterator!string sup;
  string marker;
  char[auto~] buffer;
  int offset;
  bool done;
  auto rest() { return wrap!string(cat(iterOnce buffer[offset..$], sup)); }
  bool advance() {
    if (done) { buffer.free; return false; }
    int pos;
    do pos = find (buffer[offset .. $], marker);
    while pos == -1 {
      if (auto supstep <- sup) {
        buffer ~= supstep;
      } else {
        value = buffer[offset .. $];
        done = true;
        return true;
      }
    }
    value = buffer[offset .. offset + pos];
    offset += pos + marker.length;
    return true;
  }
}

/*Function: splitAt
Splits an iterator at a given marker, yielding the pieces in-between. */
auto splitAt(Iterator!string iter, string marker) {
  auto res = new SplitIterator;
  res.sup = iter;
  res.marker = marker;
  return res;
}

/*Function: toStringz
Converts a Neat string to a C null-terminated char*. */
char* toStringz(string s) {
  auto s2 = new char[](s.length + 1);
  s2[0 .. s.length] = s;
  s2[s.length] = char:0;
  return s2.ptr;
}

/*Function: CToString
Converts a C null-terminated char* to a Neat string. */
string CToString(char* c) {
  if !c return string:(null x 2);
  char* cur = c;
  while (*cur) cur++;
  return c[0 .. (int:cur - int:c)];
}

string concat(string[] strs) {
  char[auto~] res;
  while auto str <- strs res ~= str;
  return res[];
}

import c.stdlib;
alias c_atoi = atoi;
alias c_atof = atof;

/*Function: atoi*/
int atoi(string s) {
  auto p = toStringz(s);
  onExit mem.free(p);
  return c_atoi(p);
}

platform(!arm*) {
  /*Function: atof*/
  float atof(string s) {
    char* p = toStringz(s);
    onExit mem.free(p);
    return float:c_atof(p);
  }
}

platform(!arm*) {
  reassign string toLower(string s) {
    // hilariously non-utf aware
    // TODO!
    char[auto~] res;
    for auto ch <- s if "A" <= ch <= "Z" res ~= char:byte:(ch - "A" + "a"); else res ~= ch;
    return res[];
  }
}

template castIter(T) {
  template castIter(U) {
    class caster : Iterator!T {
      U sup;
      bool advance() {
        if (!sup.advance()) return false;
        value = T: evaluate (sup.value);
        return true;
      }
    }
    caster castIter(U u) {
      auto res = new caster;
      res.sup = u;
      return res;
    }
  }
}

/*Function: slice
Slices off the start of *s* up to *m*. Returns a tuple of "*s* before *m*", "*s* after *m*". */
(string, string) slice(string s, string m, bool yieldNull = true) {
  auto pos = find(s, m);
  if (!pos) {
    if (yieldNull) return (s, string:(null x 2));
    raise new Error "|$m| not found in |$s| for slice! ";
  }
  return (s[0 .. pos], s[pos + m.length .. s.length]);
}

/*Function: slice
Slices off the start of *sp* up to *marker*, returning the text before *marker* and changing *sp* to the text after *marker*.*/
string slice(string* sp, string marker, bool yieldNull = true) {
  (string res, *sp) = slice(*sp, marker, yieldNull);
  return res;
}

/*Function: strip
Removes leading and tailing newlines, carriage returns, tabs and spaces */
reassign string strip(string s) {
  alias first = s[0];
  alias last = s[s.length - 1];
  while s.length && (last == "\n" || last == "\r" || last == " " || last == "\t")
    s = s[0 .. s.length - 1];
  while s.length && (first == "\n" || first == "\r" || first == " " || first == "\t")
    s = s[1 .. s.length];
  return s;
}

// import std.util;
/*Function: split
Splits a string at a marker. */
string[] split(string s, string marker) {
  string[auto~] res;
  while (s.length) {
    auto pos = find(s, marker);
    if (pos == -1) { res ~= s; s = null; }
    else {
      res ~= s[0..pos];
      s = s[pos+marker.length .. $];
    }
  }
  return res[];
}

extern(C) int asprintf(char** strp, char* fmt, ...);
string toString(int i, int base = 10) {
  if base == 2 {
    string a;
    for (int k=31; k>=0; k--)
      a="$a$(i>>k & 1)";
    return a;
  }
  if base == 10
    return "$i";
  if base == 16 {
    char *a;
    asprintf(&a,"%x", i);
    return CToString a;
  }
  raise new Error "toString(base => $base) not supported";
}