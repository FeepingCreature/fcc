module std.hash.md5;

extern(C) void* memset(void* s, int c, int n);

// ported from http://www.fourmilab.ch/md5/
struct MD5Hash {
  ubyte x 16 hash;
  int x 4 buf;
  int x 2 bits;
  ubyte x 64 in;
  void init() {
    buf[(0,1,2,3)] = (0x67452301,0xefcdab89,0x98badcfe,0x10325476);
    bits[(0,1)] = (0,0);
  }
  void sum(ubyte[] data) {
    init;
    update data;
    finalize;
  }
  void update(ubyte[] data) {
    int t = bits[0];
    alias len = data.length;
    bits[0] = t + (len << 3);
    if (bits[0] < t) bits[1] ++;
    bits[1] += len >> 29;
    t = (t >>> 3) & 0x3f;
    if (t) {
      ubyte* p = &in[t];
      t = 64 - t;
      if (len < 3) {
        p[0..len] = data;
        return;
      }
      p[0..t] = data[0..t];
      transform();
      data = data[t .. $];
    }
    while (len >= 64) {
      in[] = data[0..64];
      transform();
      data = data[64 .. $];
    }
    in[0..len] = data;
  }
  void finalize() {
    auto count = (bits[0] >>> 3) &0x3f;
    ubyte* p = &in[count];
    *p = 0x80;
    ++p;
    count = 64 - 1 - count;
    if (count < 8) {
      memset(p, 0, count);
      transform();
      memset(&in[0], 0, 56);
    } else {
      memset(p, 0, count - 8);
    }
    (int*:&in[0])[(14, 15)] = bits[(0, 1)];
    transform();
    hash[] = (ubyte*:buf)[0..16];
  }
  void transform() {
    // buf, in
    int (a, b, c, d) = buf[(0, 1, 2, 3)];
    alias f1 = `(#z xor $ #x & $ #y xor #z)`;
    alias f2 = `(#y xor $ #z & $ #x xor #y)`;
    alias f3 = `(#x xor #y xor #z)`;
    alias f4 = `(#y xor $ #x | Â¬ #z)`;
    alias md5step = `{
      %w += mixin(%f.replace("#x", "%x").replace("#y", "%y").replace("#z", "%z")) + %data; %w = (%w << %s) | (%w >>> (32-%s)); %w += %x; }`;
    alias in = int*:&in[0];
    alias list = (
    ("f1", "a", "b", "c", "d", "in[0] + 0xd76aa478", "7"),
    ("f1", "d", "a", "b", "c", "in[1] + 0xe8c7b756", "12"),
    ("f1", "c", "d", "a", "b", "in[2] + 0x242070db", "17"),
    ("f1", "b", "c", "d", "a", "in[3] + 0xc1bdceee", "22"),
    ("f1", "a", "b", "c", "d", "in[4] + 0xf57c0faf", "7"),
    ("f1", "d", "a", "b", "c", "in[5] + 0x4787c62a", "12"),
    ("f1", "c", "d", "a", "b", "in[6] + 0xa8304613", "17"),
    ("f1", "b", "c", "d", "a", "in[7] + 0xfd469501", "22"),
    ("f1", "a", "b", "c", "d", "in[8] + 0x698098d8", "7"),
    ("f1", "d", "a", "b", "c", "in[9] + 0x8b44f7af", "12"),
    ("f1", "c", "d", "a", "b", "in[10] + 0xffff5bb1", "17"),
    ("f1", "b", "c", "d", "a", "in[11] + 0x895cd7be", "22"),
    ("f1", "a", "b", "c", "d", "in[12] + 0x6b901122", "7"),
    ("f1", "d", "a", "b", "c", "in[13] + 0xfd987193", "12"),
    ("f1", "c", "d", "a", "b", "in[14] + 0xa679438e", "17"),
    ("f1", "b", "c", "d", "a", "in[15] + 0x49b40821", "22"),
    ("f2", "a", "b", "c", "d", "in[1] + 0xf61e2562", "5"),
    ("f2", "d", "a", "b", "c", "in[6] + 0xc040b340", "9"),
    ("f2", "c", "d", "a", "b", "in[11] + 0x265e5a51", "14"),
    ("f2", "b", "c", "d", "a", "in[0] + 0xe9b6c7aa", "20"),
    ("f2", "a", "b", "c", "d", "in[5] + 0xd62f105d", "5"),
    ("f2", "d", "a", "b", "c", "in[10] + 0x02441453", "9"),
    ("f2", "c", "d", "a", "b", "in[15] + 0xd8a1e681", "14"),
    ("f2", "b", "c", "d", "a", "in[4] + 0xe7d3fbc8", "20"),
    ("f2", "a", "b", "c", "d", "in[9] + 0x21e1cde6", "5"),
    ("f2", "d", "a", "b", "c", "in[14] + 0xc33707d6", "9"),
    ("f2", "c", "d", "a", "b", "in[3] + 0xf4d50d87", "14"),
    ("f2", "b", "c", "d", "a", "in[8] + 0x455a14ed", "20"),
    ("f2", "a", "b", "c", "d", "in[13] + 0xa9e3e905", "5"),
    ("f2", "d", "a", "b", "c", "in[2] + 0xfcefa3f8", "9"),
    ("f2", "c", "d", "a", "b", "in[7] + 0x676f02d9", "14"),
    ("f2", "b", "c", "d", "a", "in[12] + 0x8d2a4c8a", "20"),
    ("f3", "a", "b", "c", "d", "in[5] + 0xfffa3942", "4"),
    ("f3", "d", "a", "b", "c", "in[8] + 0x8771f681", "11"),
    ("f3", "c", "d", "a", "b", "in[11] + 0x6d9d6122", "16"),
    ("f3", "b", "c", "d", "a", "in[14] + 0xfde5380c", "23"),
    ("f3", "a", "b", "c", "d", "in[1] + 0xa4beea44", "4"),
    ("f3", "d", "a", "b", "c", "in[4] + 0x4bdecfa9", "11"),
    ("f3", "c", "d", "a", "b", "in[7] + 0xf6bb4b60", "16"),
    ("f3", "b", "c", "d", "a", "in[10] + 0xbebfbc70", "23"),
    ("f3", "a", "b", "c", "d", "in[13] + 0x289b7ec6", "4"),
    ("f3", "d", "a", "b", "c", "in[0] + 0xeaa127fa", "11"),
    ("f3", "c", "d", "a", "b", "in[3] + 0xd4ef3085", "16"),
    ("f3", "b", "c", "d", "a", "in[6] + 0x04881d05", "23"),
    ("f3", "a", "b", "c", "d", "in[9] + 0xd9d4d039", "4"),
    ("f3", "d", "a", "b", "c", "in[12] + 0xe6db99e5", "11"),
    ("f3", "c", "d", "a", "b", "in[15] + 0x1fa27cf8", "16"),
    ("f3", "b", "c", "d", "a", "in[2] + 0xc4ac5665", "23"),
    ("f4", "a", "b", "c", "d", "in[0] + 0xf4292244", "6"),
    ("f4", "d", "a", "b", "c", "in[7] + 0x432aff97", "10"),
    ("f4", "c", "d", "a", "b", "in[14] + 0xab9423a7", "15"),
    ("f4", "b", "c", "d", "a", "in[5] + 0xfc93a039", "21"),
    ("f4", "a", "b", "c", "d", "in[12] + 0x655b59c3", "6"),
    ("f4", "d", "a", "b", "c", "in[3] + 0x8f0ccc92", "10"),
    ("f4", "c", "d", "a", "b", "in[10] + 0xffeff47d", "15"),
    ("f4", "b", "c", "d", "a", "in[1] + 0x85845dd1", "21"),
    ("f4", "a", "b", "c", "d", "in[8] + 0x6fa87e4f", "6"),
    ("f4", "d", "a", "b", "c", "in[15] + 0xfe2ce6e0", "10"),
    ("f4", "c", "d", "a", "b", "in[6] + 0xa3014314", "15"),
    ("f4", "b", "c", "d", "a", "in[13] + 0x4e0811a1", "21"),
    ("f4", "a", "b", "c", "d", "in[4] + 0xf7537e82", "6"),
    ("f4", "d", "a", "b", "c", "in[11] + 0xbd3af235", "10"),
    ("f4", "c", "d", "a", "b", "in[2] + 0x2ad7d2bb", "15"),
    ("f4", "b", "c", "d", "a", "in[9] + 0xeb86d391", "21")
    );
    static for auto id <- 0..list.length {
      alias tup = list[id];
      mixin(md5step
        .replace("%f", tup[0])
        .replace("%w", tup[1])
        .replace("%x", tup[2])
        .replace("%y", tup[3])
        .replace("%z", tup[4])
        .replace("%data", tup[5])
        .replace("%s", tup[6]));
    }
    buf[0] += a;
    buf[1] += b;
    buf[2] += c;
    buf[3] += d;
  }
}

string format-hash(ubyte[] hash) {
  char[auto~] res;
  for auto value <- hash {
    alias hex = "0123456789abcdef";
    res ~= hex[value>>4];
    res ~= hex[value&0xf];
  }
  return res[];
}
