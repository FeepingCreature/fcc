/* Title: std.irc
Provides an IRC client library.*/
module std.irc;

import std.string, std.util, std.socket, std.time, std.macros.switchover;

/*
<https://tools.ietf.org/html/rfc1459#section-2>

<message>  ::= [':' <prefix> <SPACE> ] <command> <params> <crlf>
<prefix>   ::= <servername> | <nick> [ '!' <user> ] [ '@' <host> ]
<command>  ::= <letter> { <letter> } | <number> <number> <number>
<SPACE>    ::= ' ' { ' ' }
<params>   ::= <SPACE> [ ':' <trailing> | <middle> <params> ]

<middle>   ::= <Any *non-empty* sequence of octets not including SPACE
               or NUL or CR or LF, the first of which may not be ':'>
<trailing> ::= <Any, possibly *empty*, sequence of octets not including
                 NUL or CR or LF>

<crlf>     ::= CR LF

<target>     ::= <to> [ "," <target> ]
<to>         ::= <channel> | <user> '@' <servername> | <nick> | <mask>
<channel>    ::= ('#' | '&') <chstring>
<servername> ::= <host>
<host>       ::= see RFC 952 [DNS:4] for details on allowed hostnames
<nick>       ::= <letter> { <letter> | <number> | <special> }
<mask>       ::= ('#' | '$') <chstring>
<chstring>   ::= <any 8bit code except SPACE, BELL, NUL, CR, LF and
                 comma (',')>

<user>       ::= <nonwhite> { <nonwhite> }
<letter>     ::= 'a' ... 'z' | 'A' ... 'Z'
<number>     ::= '0' ... '9'
<special>    ::= '-' | '[' | ']' | '\' | '`' | '^' | '{' | '}'

<nonwhite>   ::= <any 8bit code except SPACE (0x20), NUL (0x0), CR
                 (0xd), and LF (0xa)>

NOTES: 

  1)    <SPACE> is consists only of SPACE character(s) (0x20).
        Specially notice that TABULATION, and all other control
        characters are considered NON-WHITE-SPACE.

  2)    After extracting the parameter list, all parameters are equal,
        whether matched by <middle> or <trailing>. <Trailing> is just
        a syntactic trick to allow SPACE within parameter.

  3)    The fact that CR and LF cannot appear in parameter strings is
        just artifact of the message framing. This might change later.

  4)    The NUL character is not special in message framing, and
        basically could end up inside a parameter, but as it would
        cause extra complexities in normal C string handling. Therefore
        NUL is not allowed within messages.

  5)    The last parameter may be an empty string.

  6)    Use of the extended prefix (['!' <user> ] ['@' <host> ]) must
        not be used in server to server communications and is only
        intended for server to client messages in order to provide
        clients with more useful information about who a message is
        from without the need for additional queries.

*/


/*Struct: User
Represents an IRC user.*/
struct User {
  /*Variables: User
  
  nick - the portion before the !
  user - the middle section
  host - the portion after the @ */
  string nick;
  string user;
  string host;
}

/*Function: usersEqual
Compares two User structs and returns whether they are equal.*/
bool usersEqual(User a, User b) {
  if a.nick.toLower() != b.nick.toLower() && !(a.nick == "*" || b.nick == "*") return false;
  if a.user.toLower() != b.user.toLower() && !(a.user == "*" || b.user == "*") return false;
  if a.host.toLower() != b.host.toLower() && !(a.host == "*" || b.host == "*") return false;
  
  return true;
}

/*Enum: Commands
An enum representing all of the commands described in RFC 1459. For more 
information, see <https://tools.ietf.org/html/rfc1459#section-4> and 
<https://tools.ietf.org/html/rfc1459#section-5>.

Connection Registration:
- PASS
- NICK
- USER
- SERVER
- OPER
- SQUIT

Channel Operations:
- JOIN
- PART
- MODE
- TOPIC
- NAMES
- LIST
- INVITE
- KICK

Server Queries and Commands:
- VERSION
- STATS
- LINKS
- TIME
- CONNECT
- TRACE
- ADMIN
- INFO

Sending Messages:
- PRIVMSG
- NOTICE

User-Based Queries:
- WHO
- WHOIS
- WHOWAS

Miscellaneous:
- AWAY
- REHASH
- RESTART
- SUMMON
- WALLOPS
- USERHOST
- ISON

*/
enum Command {
  // connection registration
  PASS,     NICK,     USER,     SERVER, OPER,     QUIT,     SQUIT,
  // channel operations
  JOIN,     PART,     MODE,     TOPIC,  NAMES,    LIST,     INVITE, KICK,
  // server queries and commands
  VERSION,  STATS,    LINKS,    TIME,   CONNECT,  TRACE,    ADMIN,  INFO,
  // sending messages
  PRIVMSG,  NOTICE,
  // user-based queries
  WHO,      WHOIS,    WHOWAS,
  // misc.
  KILL,     PING,     PONG,     ERROR,
  // optional
  AWAY,     REHASH,   RESTART,  SUMMON, WALLOPS,  USERHOST, ISON
}


/*Enum: Reply
Contains all of the IRC reply numerics specified in <https://tools.ietf.org/html/rfc1459#section-6> */
enum Reply {

  // client-server
  RPL_WELCOME = 001,
  RPL_YOURHOST = 002,
  RPL_CREATED = 003,
  RPL_MYINFO = 004,
  RPL_BOUNCE = 005,
  
  // replies
  RPL_USERHOST = 302,
  RPL_ISON = 303,
  RPL_AWAY = 301,
  RPL_UNAWAY = 305,
  RPL_NOWAWAY = 306,
  RPL_WHOISUSER = 311,
  RPL_WHOISSERVER = 312,
  RPL_WHOISOPERATOR = 313,
  RPL_WHOISIDLE = 317,
  RPL_ENDOFWHOIS = 318,
  RPL_WHOISCHANNELS = 319,
  RPL_WHOWASUSER = 314,
  RPL_ENDOFWHOWAS = 369,
  RPL_LISTSTART = 321,
  RPL_LIST = 322,
  RPL_LISTEND = 323,
  RPL_UNIQOPIS = 325,
  RPL_CHANNELMODEIS = 324,
  RPL_NOTOPIC = 331,
  RPL_TOPIC = 332,
  RPL_INVITING = 341,
  RPL_SUMMONING = 342,
  RPL_INVITELIST = 346,
  RPL_ENDOFINVITELIST = 347,
  RPL_EXCEPTLIST = 348,
  RPL_ENDOFEXCEPTLIST = 349,
  RPL_VERSION = 351,
  RPL_WHOREPLY = 352,
  RPL_ENDOFWHO = 315,
  RPL_NAMREPLY = 353,
  RPL_ENDOFNAMES = 366,
  RPL_LINKS = 364,
  RPL_ENDOFLINKS = 365,
  RPL_BANLIST = 367,
  RPL_ENDOFBANLIST = 368,
  RPL_INFO = 371,
  RPL_ENDOFINFO = 374,
  RPL_MOTDSTART = 375,
  RPL_MOTD = 372,
  RPL_ENDOFMOTD = 376,
  RPL_YOUREOPER = 381,
  RPL_REHASHING = 382,
  RPL_YOURESERVICE = 383,
  RPL_TIME = 391,
  RPL_USERSSTART = 392,
  RPL_USERS = 393,
  RPL_ENDOFUSERS = 394,
  RPL_NOUSERS = 395,
  
  // replies
  RPL_TRACELINK = 200,
  RPL_TRACECONNECTING = 201,
  RPL_TRACEHANDSHAKE = 202,
  RPL_TRACEUNKNOWN = 203,
  RPL_TRACEOPERATOR = 204,
  RPL_TRACEUSER = 205,
  RPL_TRACESERVER = 206,
  RPL_TRACESERVICE = 207,
  RPL_TRACENEWTYPE = 208,
  RPL_TRACECLASS = 209,
  RPL_TRACERECONNECT = 210,
  RPL_TRACELOG = 261,
  RPL_TRACEEND = 262,
  RPL_STATSLINKINFO = 211,
  RPL_STATSCOMMANDS = 212,
  RPL_ENDOFSTATS = 219,
  RPL_STATSUPTIME = 242,
  RPL_STATSOLINE = 243,
  RPL_UMODEIS = 221,
  RPL_SERVLIST = 234,
  RPL_SERVLISTEND = 235,
  RPL_LUSERCLIENT = 251,
  RPL_LUSEROP = 252,
  RPL_LUSERUNKNOWN = 253,
  RPL_LUSERCHANNELS = 254,
  RPL_LUSERME = 255,
  RPL_ADMINME = 256,
  RPL_ADMINLOC1 = 257,
  RPL_ADMINLOC2 = 258,
  RPL_ADMINEMAIL = 259,
  RPL_TRYAGAIN = 263,
  
  // errors
  ERR_NOSUCHNICK = 401,
  ERR_NOSUCHSERVER = 402,
  ERR_NOSUCHCHANNEL = 403,
  ERR_CANNOTSENDTOCHAN = 404,
  ERR_TOOMANYCHANNELS = 405,
  ERR_WASNOSUCHNICK = 406,
  ERR_TOOMANYTARGETS = 407,
  ERR_NOSUCHSERVICE = 408,
  ERR_NOORIGIN = 409,
  ERR_NORECIPIENT = 411,
  ERR_NOTEXTTOSEND = 412,
  ERR_NOTOPLEVEL = 413,
  ERR_WILDTOPLEVEL = 414,
  ERR_BADMASK = 415,
  ERR_UNKNOWNCOMMAND = 421,
  ERR_NOMOTD = 422,
  ERR_NOADMININFO = 423,
  ERR_FILEERROR = 424,
  ERR_NONICKNAMEGIVEN = 431,
  ERR_ERRONEUSNICKNAME = 432,
  ERR_NICKNAMEINUSE = 433,
  ERR_NICKCOLLISION = 436,
  ERR_UNAVAILRESOURCE = 437,
  ERR_USERNOTINCHANNEL = 441,
  ERR_NOTONCHANNEL = 442,
  ERR_USERONCHANNEL = 443,
  ERR_NOLOGIN = 444,
  ERR_SUMMONDISABLED = 445,
  ERR_USERSDISABLED = 446,
  ERR_NOTREGISTERED = 451,
  ERR_NEEDMOREPARAMS = 461,
  ERR_ALREADYREGISTRED = 462,
  ERR_NOPERMFORHOST = 463,
  ERR_PASSWDMISMATCH = 464,
  ERR_YOUREBANNEDCREEP = 465,
  ERR_YOUWILLBEBANNED = 466,
  ERR_KEYSET = 467,
  ERR_CHANNELISFULL = 471,
  ERR_UNKNOWNMODE = 472,
  ERR_INVITEONLYCHAN = 473,
  ERR_BANNEDFROMCHAN = 474,
  ERR_BADCHANNELKEY = 475,
  ERR_BADCHANMASK = 476,
  ERR_NOCHANMODES = 477,
  ERR_BANLISTFULL = 478,
  ERR_NOPRIVILEGES = 481,
  ERR_CHANOPRIVSNEEDED = 482,
  ERR_CANTKILLSERVER = 483,
  ERR_RESTRICTED = 484,
  ERR_UNIQOPPRIVSNEEDED = 485,
  ERR_NOOPERHOST = 491,
  
  // errors
  ERR_UMODEUNKNOWNFLAG = 501,
  ERR_USERSDONTMATCH = 502,
  
  // reserved
  RPL_SERVICEINFO = 231,
  RPL_ENDOFSERVICES = 232,
  RPL_SERVICE = 233,
  RPL_NONE = 300,
  RPL_WHOISCHANOP = 316,
  RPL_KILLDONE = 361,
  RPL_CLOSING = 362,
  RPL_CLOSEEND = 363,
  RPL_INFOSTART = 373,
  RPL_MYPORTIS = 384,
  RPL_STATSCLINE = 213,
  RPL_STATSNLINE = 214,
  RPL_STATSILINE = 215,
  RPL_STATSKLINE = 216,
  RPL_STATSQLINE = 217,
  RPL_STATSYLINE = 218,
  RPL_STATSVLINE = 240,
  RPL_STATSLLINE = 241,
  RPL_STATSHLINE = 244,
  RPL_STATSSLINE = 244,
  RPL_STATSPING = 246,
  RPL_STATSBLINE = 247,
  RPL_STATSDLINE = 250,
  ERR_NOSERVICEHOST = 492

}

class Server {
  Socket sock;
  Iterator!string iter;
  Channel*[auto~] channels;
  string name;
  string address;
  User me;
  string motd;
  bool connected;
  string[auto~] buf;
  void delegate(User,string[])[auto~] callbacks;
  void delegate(User,Reply,string[]) onCallback;
  void delegate(User,string[])[auto~] commands;
  void delegate(User,Command,string[]) onCommand;
  
  void setCallback(Reply r, void delegate(User,string[]) dg) {
    if r<callbacks.length
      callbacks[r] = dg;
    else {
      callbacks ~= new type-of callbacks ((r+1) - callbacks.length) #[];
      callbacks[r] = dg;
    }
  }
  
  void setCommand(Command c, void delegate(User,string[]) dg) {
    if c<commands.length
      commands[c] = dg;
    else {
      commands ~= new type-of commands ((c+1) - commands.length) #[];
      commands[c] = dg;
      //writeln "commands.length: $(commands.length); command: $c";
    }
  }
  
  void _welcomeCallback(User u, string[] args) {
    connected = true;
    for auto l <- buf
      sendCommand l;
    buf.free;
    buf = null;
  }
  
  void _appendMotdCallback(User u, string[] motdline) {
    motd ~= motdline[1] ~ "\n";
  }
  
  void _pong (User u, string[] args) {
    string s = std.string.join(args," ");
    //writeln "PONG $s";
    sendCommand("PONG :$s",=>force);
  }
  
  void _nickUsed (User u, string[] args) {
    nick(me.nick~"_");
  }
  
  void init(string nick, string host, int port = 6667, string user = "NeatIRCLib", string identd = "neatirclib", string realname = "Neat IRC Library", string pass = null) {
    //writeln "$nick $host $port $user $identd $realname $pass";
    //writeln "connect($host, $(short:port))";
    sock = connect(host, short:port);
    iter = (castIter!string readsocket sock).splitAt "\n";
    sendCommand("NICK $nick",=>force);
    sendCommand("USER $user $identd $host :$realname",=>force);
    address = "$host:$port";
    me.nick = nick;
    me.user = user;
    me.host = identd;
    if pass
      sendCommand("PASS $pass",=>force);
    
    motd = "";
    
    setCommand(Command.PING, &_pong);
    
    setCallback(Reply.RPL_WELCOME, &_welcomeCallback);
    
    setCallback(Reply.RPL_MOTD, &_appendMotdCallback);
    
    setCallback(Reply.ERR_NICKNAMEINUSE,&_nickUsed);
    
  }
  
  void listen() {
    while true {
      string line = readLine;
      if auto rest = line.endsWith "\r" line = rest;
      //writeln ">> $line";
      // <message>  ::= [':' <prefix> <SPACE> ] <command> <params> <crlf>
      string commandstring;
      User user;
      if line.startsWith ":" {
        line = line.startsWith ":";
        (string userstring, commandstring) = line.slice " ";
        (user.nick, userstring) = userstring.slice "!";
        (user.user, user.host) = userstring.slice "@";
      } else
        commandstring = line;
      
      (string command, commandstring) = commandstring.slice " ";
      string[] argsarr = commandstring.split " ";
      string[auto~] args;
      
      bool comment=false;
      while auto a <- argsarr {
        if !comment {
          if a.startsWith ":" {
            comment=true;
            args ~= a.startsWith ":";
          } else
            args ~= a;
        } else {
          args[$-1] ~= " " ~ a;
        }
      }
      
      auto r = atoi command;
      //writeln "Command $command, args $(args[])";
      if r {
        onCallback?(user,Reply:r,args[]);
        if r<callbacks.length
          callbacks[r]?(user,args[]);
      } else if !r {
        Command command2;
      
        // string s = "PASS, NICK, USER, SERVER, OPER, QUIT, SQUIT, JOIN, PART, MODE, TOPIC, NAMES, LIST, INVITE, KICK, VERSION, STATS, LINKS, TIME, CONNECT, TRACE, ADMIN, INFO, PRIVMSG, NOTICE, WHO, WHOIS, WHOWAS, KILL, PING, PONG, ERROR, AWAY, REHASH, RESTART, SUMMON, WALLOPS,  USERHOST, ISON";
        // for auto c<-s.split ", " writeln "if command == \"$c\" command2 = Command.$c;";
        // holy crap would I not write that manually
        //writeln "command = '$command'";
        if command == "PASS" command2 = Command.PASS;
        if command == "NICK" command2 = Command.NICK;
        if command == "USER" command2 = Command.USER;
        if command == "SERVER" command2 = Command.SERVER;
        if command == "OPER" command2 = Command.OPER;
        if command == "QUIT" command2 = Command.QUIT;
        if command == "SQUIT" command2 = Command.SQUIT;
        if command == "JOIN" command2 = Command.JOIN;
        if command == "PART" command2 = Command.PART;
        if command == "MODE" command2 = Command.MODE;
        if command == "TOPIC" command2 = Command.TOPIC;
        if command == "NAMES" command2 = Command.NAMES;
        if command == "LIST" command2 = Command.LIST;
        if command == "INVITE" command2 = Command.INVITE;
        if command == "KICK" command2 = Command.KICK;
        if command == "VERSION" command2 = Command.VERSION;
        if command == "STATS" command2 = Command.STATS;
        if command == "LINKS" command2 = Command.LINKS;
        if command == "TIME" command2 = Command.TIME;
        if command == "CONNECT" command2 = Command.CONNECT;
        if command == "TRACE" command2 = Command.TRACE;
        if command == "ADMIN" command2 = Command.ADMIN;
        if command == "INFO" command2 = Command.INFO;
        if command == "PRIVMSG" command2 = Command.PRIVMSG;
        if command == "NOTICE" command2 = Command.NOTICE;
        if command == "WHO" command2 = Command.WHO;
        if command == "WHOIS" command2 = Command.WHOIS;
        if command == "WHOWAS" command2 = Command.WHOWAS;
        if command == "KILL" command2 = Command.KILL;
        if command == "PING" command2 = Command.PING;
        if command == "PONG" command2 = Command.PONG;
        if command == "ERROR" command2 = Command.ERROR;
        if command == "AWAY" command2 = Command.AWAY;
        if command == "REHASH" command2 = Command.REHASH;
        if command == "RESTART" command2 = Command.RESTART;
        if command == "SUMMON" command2 = Command.SUMMON;
        if command == "WALLOPS" command2 = Command.WALLOPS;
        if command == "USERHOST" command2 = Command.USERHOST;
        if command == "ISON" command2 = Command.ISON;
        
        if !command2
          raise new Error "Command $command is non-standard!";
        onCommand?(user,command2,args[]);
        if command2 < commands.length
          commands[command2]?(user,args[]);
      }
    }
  }
  
  string readLine() {
    auto buf <- iter;
    writeln "$(address) >> $buf";
    return buf;
  }
  
  void sendCommand(string s, bool force = false) {
    if !connected && !force {
      buf ~= s;
      return;
    }
    writeln "$(address) << $s";
    sock.sendAll byte[]:(s~"\r\n");
  }
  
  void join(string chan) {
    sendCommand "JOIN $chan";
    Channel c = new Channel;
    c.name = chan;
    channels ~= &c;
  }
  
  void part(string chan) {
    sendCommand "PART $chan";
    /*for (int i=0;i<channels.length;i++)
      if channels[i] && channels[i].name == chan
        channels[i] = null;*/
  }
  
  void msg (string chan, string message) {
    int max = 500 - chan.length; // max is 512, "PRIVMSG " is 8, " :" is 2, "\r\n" is 2, thus 500 minus channel length.
    int min(int a, int b) {if a<b return a; else return b;}
    for auto l <- message.split "\n"
      for (int i = 0; i<l.length; i+=max)
        sendCommand "PRIVMSG $chan :$(l[i..min(i+max,l.length)])";
  }
  
  void notice (string chan, string message) {
    int max = 501 - chan.length; // max is 512, "NOTICE " is 7, " :" is 2, "\r\n" is 2, thus 501 minus channel length.
    int min(int a, int b) {if a<b return a; else return b;}
    for auto l <- message.split "\n"
      for (int i = 0; i<l.length; i+=max)
        sendCommand "NOTICE $chan :$(l[i..min(i+max,l.length)])";
  }
  
  void nick (string n) {
    sendCommand("NICK $n",=>force);
    me.nick = n;
  }
  
  void quit(string msg = null) {
    if msg
      sendCommand "QUIT :$msg";
    else
      sendCommand "QUIT";
  }
}

class Channel {
  string name;
  void delegate(User,string[])[] commands;
  string[] users;
}

