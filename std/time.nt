/*Title: std.time
Timekeeping functions*/
module std.time;

import c.time;

alias time = c.time.time;

struct timeval {
  int tv_sec, tv_usec;
}
extern(C) int gettimeofday(timeval*, void*);
extern(C) int usleep(int); // I hope this really is int.

/*Function: µsec
The number of microseconds since the UNIX epoch*/
platform(i686-mingw32) {
  extern(Windows) {
    bool QueryPerformanceCounter(long*);
    bool QueryPerformanceFrequency(long*);
    int timeBeginPeriod(int);
    int timeEndPeriod(int);
  }
  long µsec() {
    QueryPerformanceCounter(&long t);
    QueryPerformanceFrequency(&long freq);
    double factor = double:1000000 / double:freq;
    return long:(double:t * factor);
  }
}

platform(!i686-mingw32) {
  long µsec() {
    timeval tv;
    gettimeofday(&tv, null);
    return tv.tv_sec * long:1_000_000 + tv.tv_usec;
  }
  int msec() {
    timeval tv;
    gettimeofday(&tv, null);
    return tv.tv_sec * 1_000 + tv.tv_usec / 1_000;
  }
}

/*Function: sec
The number of seconds since the UNIX epoch */
double sec() { return double:µsec() / 1_000_000; }

/*Function: sleep
Sleep at least *length* seconds*/
void sleep(float length) {
  platform(i686-mingw32) {
    timeBeginPeriod 1;
    usleep int:(length * 1_000_000);
    timeEndPeriod 1;
  }
  platform(!i686-mingw32) {
    usleep int:(length * 1_000_000);
  }
}

/*Function: measure
How many seconds were needed to execute *dg* */
double measure(void delegate() dg) {
  double start = sec();
  dg();
  double end = sec();
  return end - start;
}

/*Function: count-fps
Calls dg once every second passing as a number how often its return dg was called.
Usage: call the returned dg once per frame redraw, and print FPS in the callback. */
void delegate() count-fps(void delegate(float) dg) {
  auto last = sec();
  int fps;
  return new \{
    auto t = sec();
    if (t - last) > 1 {
      last = t;
      dg(fps);
      fps = 0;
    } else fps ++;
  };
}
