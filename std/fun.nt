/* Title: std.fun
Utilities commonly found in functional languages */
module std.fun;

/*Template: select
  Selects from an iterator, according to a criterion.

Parameters:
  iter - the iterator to select from
  test - the criterion for inclusion */
template select(T) {
  alias steptype = type-of-elem value-of!T[0];
  
  class selectIterator : Iterator!steptype {
    type-of value-of!T[0].iterator iter;
    T[1] test;
    bool advance() {
      while value <- iter if (test value) return true;
      free;
      return false;
    }
  }
  selectIterator select(T t) {
    auto res = new selectIterator;
    res.iter = type-of res.iter: t[0].iterator;
    res.test = t[1];
    return res;
  }
}

/*Template: map
  Maps an iterator onto a function

Parameters:
  iter - the iterator to map
  transform - what to do with each element */
template map(T) {
  alias steptype = type-of value-of!T[1] value-of!type-of-elem value-of!T[0];
  
  class mapIterator : Iterator!steptype {
    type-of value-of!T[0].iterator iter;
    T[1] transform;
    bool advance() {
      if (auto val <- iter) { value = transform val; return true; }
      free;
      return false;
    }
  }
  mapIterator map(T t) {
    auto res = new mapIterator;
    res.iter = type-of res.iter: t[0].iterator;
    res.transform = t[1];
    return res;
  }
}

/*Template: reduce
  Reduces an iterator via a combining function, returning a value

Parameters:
  iter - the iterator to reduce
  [initial] - the initial value. optional.
  merge - the combining function*/
template reduce(T) {
  auto reduce(T t) {
    auto iter = t[0].iterator;
    static if (t.length == 3) {
      auto aggr = t[1], merge = t[2];
      for auto value <- iter
        aggr = merge (aggr, value);
      return aggr;
    } else {
      auto merge = t[1];
      if (auto aggr <- iter) {
        for auto value <- iter
          aggr = merge (aggr, value);
        return aggr;
      } else raise new Error "Cannot reduce empty iterator - please provide an initial value";
    }
  }
}

/*Template: selectAs
  Combines the functionality of map and select

Parameters:
  iter - the iterator to select from
  testchange - if this returns a value that converts to true, include it */
template selectAs(T) {
  alias steptype = type-of value-of!T[1] value-of!type-of-elem value-of!T[0];
  
  class selectAsIterator : Iterator!steptype {
    type-of value-of!T[0].iterator iter;
    T[1] test-change;
    bool advance() {
      while auto value <- iter {
        this.value = test-change value;
        if (this.value) return true;
      }
      return false;
    }
  }
  selectAsIterator selectAs(T t) {
    auto res = new selectAsIterator;
    res.iter = type-of res.iter: t[0].iterator;
    res.test-change = t[1];
    return res;
  }
}
