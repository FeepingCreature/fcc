/*Title: std.boehm
The Boehm GC*/
module std.boehm; // use Boehm GC

import c.gc, std.thread;

pragma(lib, "gc");

extern(C) void* memset(void* s, int c, size_t n);
void* simple_debug_malloc(int i) { return GC_debug_malloc(i, "", 0); }
void* simple_debug_malloc_atomic(int i) { return GC_debug_malloc_atomic(i, "", 0); }
void* myDebugMalloc(int a) { return (aligned16malloc!simple_debug_malloc) a; }
void* myDebugCalloc(int a, b) { return myDebugMalloc(a * b); }
void* myDebugCallocAtomic(int a) {
  auto res = (aligned16malloc!simple_debug_malloc_atomic) a;
  if (!res) {
    printf("Allocation failed!");
    _interrupt 3;
  }
  memset(res, 0, a);
  return res;
}
void myDebugFree(void* vp) { aligned16free!GC_debug_free vp; }
void myFree(void* vp) { aligned16free!GC_free vp; }

// void* myRealloc(void* a, size_t b) { return GC_realloc(a, int:b); }
void* myMalloc(int a) { return aligned16malloc!GC_malloc a; }
void* myCallocAtomic(int a) {
  auto res = aligned16malloc!GC_malloc_atomic a;
  memset(res, 0, a);
  return res;
}
void* myCalloc(int a, b) {
  auto len = a * b;
  auto res = myMalloc(len);
  auto bp = ubyte*:res;
  for 0..len { *(bp++) = ubyte:0; }
  return res;
}

platform(default) {
  void register_thread(void* stackbase /* ignored for known thread base */) {
    GC_stack_base gsb;
    gsb.mem_base = stack-base;
    GC_register_my_thread(&gsb);
    // writeln "register stack base $(stack-base) (ebp $(_ebp))";
    // register my TLS segment as a root
    GC_add_roots(_threadlocal, _threadlocal + tls_size);
  }
}

platform(i686-mingw32) {
  void register_thread(void* stackbase) {
    GC_stack_base gsb;
    if (!stackbase)
      raise new Error "Must supply stackbase for Boehm under Windows! ";
    gsb.mem_base = stackbase;
    static if (is-defined GC_register_my_thread) {
      GC_register_my_thread(&gsb);
    }
    GC_add_roots(_threadlocal, _threadlocal + tls_size);
  }
}

/*Function: initBoehm
Initialize and enable the Boehm GC*/
void initBoehm(bool debugMode = false) {
  (mem.malloc_dg, mem.calloc_atomic_dg, mem.calloc_dg, /*mem.realloc_dg, */mem.free_dg)
    = [(&myMalloc,      &myCallocAtomic,      &myCalloc,      /*&myRealloc,      */&myFree),
       (&myDebugMalloc, &myDebugCallocAtomic, &myDebugCalloc, /*&myDebugRealloc, */&myDebugFree)
      ][debugMode];
  GC_init;
  static if (is-defined GC_allow_register_threads) {
    GC_allow_register_threads;
  }
  GC_add_roots(_threadlocal, _threadlocal + tls_size); // remind me why I need to do this
  auto oldDg = onThreadCreation;
  onThreadCreation = new delegate void(void* stackbase) {
    register_thread(stackbase);
    if (oldDg) { oldDg(stackbase); }
  };
}
