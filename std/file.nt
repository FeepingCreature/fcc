  /*Title: std.file
File I/O*/
module std.file;

import c.dirent, c.stdio, c.fcntl, c.unistd, c.errno, c.stdlib, c.utime, c.sys.stat;

class ErrnoError : Error {
  int errno;
  string err;
  void init() {
    errno = .errno;
  }
  void init(string e) {
    init();
    err = e;
  }
  string toString() { return "ErrnoError $(err): $(CToString strerror(errno)) ($errno)"; }
}

/*Template: readfile
  Returns an iterator over ubyte[] that yields incremental chunks from a file.
*/
template readfile(T) {
  class reader : Iterator!ubyte[] {
    int fd;
    ubyte x 256  buf;
    void close() { .close(fd); }
    bool advance() {
      auto size = read(fd, buf.ptr, buf.length);
      if size <= 0 { close; return false; }
      value = buf[0 .. size];
      return true;
    }
  }
  reader readfile(T t) {
    auto res = new reader;
    res.fd = t;
    return res;
  }
}

alias C_open = open;
alias C_close = close;

import std.string;

platform(default) {
  alias read-mode = O_RDONLY, tweak-mode = 0;
}

platform(*-mingw*) {
  alias read-mode = O_RDONLY;
  alias tweak-mode = O_BINARY; // FUCK YOU SO HARD MICROSOFT WINDOWS.
}

platform(arm*) {
  alias read-mode = O_RDONLY, tweak-mode = 0;
}

/*
  Function: open
  Wrapper around C's open()
*/
int open(string file, int file-mode = read-mode, mode_t perms = -1) {
  platform(i686-mingw32) {
    if (perms == -1) perms = S_IREAD | S_IWRITE;
  }
  platform(!i686-mingw32) {
    if (perms == -1) perms = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
  }
  scope ptr = toStringz(file);
  auto fd = C_open(ptr, file-mode | tweak-mode, perms);
  if (fd == -1) raise new ErrnoError;
  return fd;
}

/*Function: readAll
  Completely reads a file from the drive. */
ubyte[] readAll(string file) {
  auto fd = open file;
  fstat(fd, &stat st);
  auto res = new ubyte[] st.st_size;
  size_t offset, size;
  do {
    size = size_t: read(fd, res.ptr + offset, res.length - int:offset);
  } while size > 0 {
    offset += size;
  }
  if (int:size == -1) raise new ErrnoError;
  assert(offset == size_t:res.length);
  close fd;
  return res;
}

class WriterError : Error {
  void init() { super.init "WriterError"; }
}

extern(C) int write(int fd, void* buf, int count);
RenameIdentifier write C_write;

class writer {
  int hdl;
  void init(int hdl) this.hdl = hdl;
  void init(string file) hdl = open(file, O_RDWR | O_CREAT | O_TRUNC);
  void step(ubyte[] data) {
    while data.length {
      auto res = C_write(hdl, data.ptr, data.length);
      if res == -1 { perror "While writing $(data.length) bytes to $hdl".toStringz(); raise (new WriterError); }
      data = data[res .. $];
    }
  }
  void close() { .close hdl; }
}

struct writeclose {
  void delegate(ubyte[]) writedg;
  void delegate() closedg;
  void close() { closedg(); }
  alias implicit-cast = writedg;
}

/*Function: writefile
Returns a delegate that, when called, will write its parameter to a handle.

Parameters:
  hdl - a file handle
*/
writeclose writefile(int hdl)
  using new writer hdl
    return writeclose:(&step, &that.close);

writeclose writefile(string fn)
  using new writer fn
    return writeclose:(&step, &that.close);
/*Function: writeAll
Writes data to a file.
If the file exists, it will be truncated; otherwise, it will be created.

Parameters:
  string file - the filename
  ubyte[] data - the data to write*/
void writeAll(string file, ubyte[] data) using scope=new writer file {
  step data;
  that.close;
}

alias c_getcwd = getcwd;

/*Function: getcwd
Wraps around the C getcwd function*/
string getcwd() {
  auto buffer = new char[] 128;
  while true {
    if (c_getcwd(buffer.ptr, buffer.length)) {
      return buffer[0 .. strlen buffer.ptr];
    }
    auto oldlen = buffer.length;
    buffer.free;
    buffer = new char[] (oldlen * 2);
  }
}

/*Function: basedir
Returns the directory component of its argument*/
string basedir(string file) {
  if file.endsWith "/" return file;
  auto slashpos = file.rfind("/");
  // if (!slashpos) raise new Error "No base dir in $file";
  if (!slashpos) return ".";
  return file[0..slashpos+1];
}

string relativePathAt(string target, string where) {
  if ((!!target.startsWith("/")) != (!!where.startsWith("/")))
    raise new Error "relativePathAt ($target, $where): arguments must either be both relative or both absolute";
  bool absolute = !!target.startsWith("/");
  if (absolute) { target = target[1..$]; where = where[1..$]; }
  
  auto parts-target = target.split "/", parts-origin = where.split "/";
  onSuccess[parts-target, parts-origin] {
    parts-target.free; parts-origin.free;
  }
  
  while (parts-target.length && parts-origin.length && parts-target[0] == parts-origin[0]) {
    parts-target = parts-target[1..$];
    parts-origin = parts-origin[1..$];
  }
  string res = ".".dup;
  for auto origin <- parts-origin {
    if (origin == ".") continue; // no need to undo
    onSuccess[res] res.free;
    res = res.sub ".."; // undo path
  }
  for auto part <- parts-target {
    onSuccess[res] res.free;
    res = res.sub part; // redo path
  }
  return resolvePath res;
}

string resolvePath(string path) {
  if (!path.find("/..")) return path;
  auto backup = path;
  bool absolute;
  if (auto rest = path.startsWith "/") {
    path = rest;
    absolute = true;
  }
  auto parts = path.split "/";
  onSuccess[parts] parts.free;
  
  string[~] resparts;
  for auto part <- parts {
    if (part == ".") { }
    else if (part == "..") {
      if (resparts.length && resparts[$-1] != "..") resparts = resparts[0..$-1];
      else {
        if (absolute)
          raise new Error "Path resolves to location above the filesystem root: $backup";
        resparts ~= part;
      }
    } else resparts ~= part;
  }
  path = resparts.join "/";
  if (absolute) path = "/$path";
  else if (!path.length) path = ".";
  return path;
}

// in path1, access path2
/*Function: sub
Given two paths, returns the second path as seen from the first path. */
string sub(string path1, path2) {
  // TODO: win32 special handling?
  if path2.startsWith "/" return path2;
  if path1.endsWith "/" return "$path1$path2";
  if (path1 == ".") return path2;
  if (path2 == ".") return path1;
  return "$path1/$path2";
}

time_t accessed(string file) {
  int fd = open file;
  if (fd == -1) raise new ErrnoError;
  fstat(fd, &stat s);
  close fd;
  platform(i686-mingw32) {
    return s.st_atime;
  }
  platform(!i686-mingw32) {
    return s.st_atim.tv_sec;
  }
}

void set-accessed(string file, time_t t) {
  utimbuf times;
  times.actime = t;
  times.modtime = modified file;
  if (utime(scope= toStringz file, &times) == -1)
    raise new ErrnoError;
}

time_t modified(string file) {
  int fd = open file;
  if (fd == -1) raise new ErrnoError;
  fstat(fd, &stat s);
  close fd;
  platform(i686-mingw32) {
    return s.st_mtime;
  }
  platform(!i686-mingw32) {
    return s.st_mtim.tv_sec;
  }
}

void set-modified(string file, time_t t) {
  utimbuf times;
  times.actime = accessed file;
  times.modtime = t;
  if (utime(scope= toStringz file, &times) == -1)
    raise new ErrnoError;
}

time_t statuschanged(string file) {
  int fd = open file;
  if (fd == -1) raise new ErrnoError;
  fstat(fd, &stat s);
  close fd;
  platform(i686-mingw32) {
    return s.st_ctime;
  }
  platform(!i686-mingw32) {
    return s.st_ctim.tv_sec;
  }
}

int filesize(string file) {
  int fd = open file;
  if (fd == -1) raise new ErrnoError;
  fstat(fd, &stat s);
  close fd;
  return s.st_size;
}

// TODO: win32
platform(!*-mingw32) {
  alias C_realpath = realpath;
  reassign string realpath(string path) {
    return CToString C_realpath(toStringz path, null);
  }
}

/*
  Function: exists
  Returns whether a file exists.
*/
bool exists(string file, bool raw = false) {
  platform(!*-mingw32) {
    scope p = toStringz file;
    if (raw) {
      return lstat(p, &stat s) == 0;
    }
    return access(p, F_OK) != -1;
  }
  platform(*-mingw32) {
    assert(!raw);
    scope p = toStringz file;
    return access(p, F_OK) != -1;
  }
}

extern(C) int stat(char* path, void* buf);
RenameIdentifier stat cstdlib-stat;
extern(C) int lstat(char* path, void* buf);
RenameIdentifier lstat cstdlib-lstat;

platform(!*-mingw*) {
  /*
    Function: isDir
    Returns true if the argument is a directory
  */
  bool isDir(string s) {
    scope p = toStringz s;
    cstdlib-stat(p, &stat buf);
    return !!((buf.st_mode & __S_IFMT) == __S_IFDIR);
  }
  /*
    Function: isFile
    Returns true if the argument is a regular file
  */
  bool isFile(string s) {
    scope p = toStringz s;
    cstdlib-stat(p, &stat buf);
    return !!((buf.st_mode & __S_IFMT) == __S_IFREG);
  }
}
platform(*-mingw*) {
  import c.windows;
  extern(Windows) DWORD GetFileAttributesA(char*);
  bool isDir(string s) {
    scope p = toStringz s;
    auto v = GetFileAttributesA(p);
    if (v == INVALID_FILE_ATTRIBUTES) fail;
    return !!(v & FILE_ATTRIBUTE_DIRECTORY);
  }
  bool isFile(string s) {
    scope p = toStringz s;
    auto v = GetFileAttributesA(p);
    if (v == INVALID_FILE_ATTRIBUTES) fail;
    return !((v & FILE_ATTRIBUTE_DIRECTORY) || (v & FILE_ATTRIBUTE_DEVICE));
  }
}

extern(C) int rename(char*, char*);
RenameIdentifier rename C_rename;
void C_renamewrap(string oldname, newname) {
  scope p1 = toStringz oldname, p2 = toStringz newname;
  auto res = C_rename(p1, p2);
  if (res) raise new Error "Couldn't rename '$oldname' to '$newname': $res";
}
/*
  Function: rename
  Renames a file
*/
void rename(string oldname, newname) {
  platform(posix) {
    C_renamewrap(oldname, newname);
    return;
  }
  platform(*-mingw*) {
    // win32 does not support atomic rename
    // this is not quite atomic, but hopefully sufficiently atomic :v
    if (exists newname) {
      scope tempname = "$newname.tmp"; // keep around in case rename fails
      C_renamewrap(newname, tempname);
      C_renamewrap(oldname, newname);
      // can safely unlink now
      unlink tempname;
    } else {
      C_renamewrap(oldname, newname);
    }
  }
  assert(false);
}

extern(C) int unlink(char*);
RenameIdentifier unlink C_unlink;
/*
  Function: unlink
  Deletes a file
*/
void unlink(string file) {
  scope p = toStringz file;
  auto res = C_unlink p;
  if (res) raise new Error "Couldn't unlink '$file': $res";
}

extern(C) int mkdir(char*, mode_t);
RenameIdentifier mkdir C_mkdir;
/*
  Function: mkdir
  Creates a folder
*/
void mkdir(string name) {
  scope p = toStringz name;
  auto res = C_mkdir (p, 0755);
  if (res) raise new Error "Couldn't create folder '$name': $res";
}

platform(!*-mingw*) {
  /*
    Function: isSymbolicLink
    Returns true if the argument is a symlink
  */
  bool isSymbolicLink(string s) {
    scope p = toStringz s;
    cstdlib-lstat(p, &stat buf);
    return !!((buf.st_mode & __S_IFMT) == __S_IFLNK);
  }
  extern(C) int symlink(char*, char*);
  RenameIdentifier symlink C_symlink;
  /*
    Function: symlink
    Creates a symbolic link to 'target' with name 'name'
  */
  void symlink(string target, name) {
    scope p1 = toStringz target, p2 = toStringz name;
    auto res = C_symlink (p1, p2);
    if (res) raise new Error "Couldn't create symlink to '$target' at '$name': $res";
  }
}

extern(C) char* strerror(int errnum);
/*
  Function: listDirectory
  Lists a directory's contents and returns an array of file/directory names.
*/
platform(!i686-mingw32) {
  string[] listDirectory(string path) {
    string[auto~] ret;
    
    auto dp = opendir toStringz path;
    if !dp {
      auto err = new Error CToString strerror errno;
      raise err;
    }
    
    do {
      auto entry = readdir dp;
    } while entry {
      auto name = CToString entry.d_name #.dup;
      if (name != "." && name != "..") ret ~= name;
    }
    closedir dp;
    
    return ret[];
  }
}
