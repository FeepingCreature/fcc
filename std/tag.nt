module std.tag;

interface Tag { }

interface Tagged {
  Tag offers(string name);
}

Tag offers-name(string mangle, Object obj) {
  if auto res = obj.dynamicCastTo(mangle)
    return Tag: res;
  
  if auto t = Tagged: obj
    return t.offers mangle;
  
  return null;
}

template offers(T) {
  T offers(Object obj) {
    if !obj return null;
    if (auto res = T: offers-name (T.__mangle, obj))
      return res;
    return null;
  }
}

template get-tag(T) {
  T get-tag(Object obj) {
    if (auto res = offers!T obj) return res;
    assert(false, "$obj does not offer $(T.__name)!");
  }
}