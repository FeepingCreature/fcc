module test40;

import std.socket, std.thread;

int fib(int n) {
  if (n < 2) {
    return 1;
  } else {
    return fib (n - 2) + fib(n - 1);
  }
}

long[] fibcache;
long memofib(int n) {
  void growCache() {
    if (!fibcache.length) fibcache = [long:1, 1].dup;
    fibcache ~= fibcache[$-1] + fibcache[$-2];
  }
  while (fibcache.length <= n) growCache;
  return fibcache[n];
}

void main() {
  import std.process;
  if (getenv "TESTSUITE") return;
  void handle(Socket sock) using sock {
    send byte[]: "HTTP/1.0 200 OK\r\n\r\n";
    send byte[]: "$([for i <- 0..50: memofib i].eval[])";
    close;
  }
  using new Socket::
  reuse true;
  bind new TcpAddress ("0.0.0.0", short:1780);
  listen();
  writeln "Listening. ";
  using new ThreadPool 4::
  while true {
    auto sock = accept;
    addTask new \()->handle sock;
  }
}
