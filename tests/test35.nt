module test35;

import c.ncurses, c.panel, c.form;
pragma(lib, "ncurses");
pragma(lib, "panel");
pragma(lib, "form");

import std.string;

void createBox(int y, x, w, h) {
  mvaddch(y, x, ACS_ULCORNER);
  mvaddch(y, x + w, ACS_URCORNER);
  mvaddch(y + h, x, ACS_LLCORNER);
  mvaddch(y + h, x + w, ACS_LRCORNER);
  mvhline(y, x + 1, ACS_HLINE, w - 1);
  mvhline(y + h, x + 1, ACS_HLINE, w - 1);
  mvvline(y + 1, x, ACS_VLINE, h - 1);
  mvvline(y + 1, x + w, ACS_VLINE, h - 1);
}

import std.macros.multicall;
void main() {
  initscr;
  cbreak;
  noecho;
  stdscr.keypad char:true;
  auto fields = [new_field(1, 10, 4, 18, 0, 0), new_field(1, 10, 6, 18, 0, 0), FIELD*:null];
  for int i <- [0,1] {
    fields[i].set_field_back size_t:A_UNDERLINE;
    fields[i].field_opts_off 0x0040;
  }
  
  auto my_form = new_form(fields.ptr);
  my_form.post_form();
  refresh;
  
  mvprintw(4, 10, "Value 1:");
  mvprintw(6, 10, "Value 2:");
  refresh;
  
  using my_form {
    while (auto ch = getch()) != KEY_F0+1 {
      if (ch == KEY_DOWN) {
        form_driver REQ_NEXT_FIELD;
        form_driver REQ_END_LINE;
      } else if (ch == KEY_UP) {
        form_driver REQ_PREV_FIELD;
        form_driver REQ_END_LINE;
      } else {
        form_driver ch;
      }
    }
    unpost_form;
    free_form;
  }
  field[0].free_field();
  field[1].free_field();
  endwin;
}
