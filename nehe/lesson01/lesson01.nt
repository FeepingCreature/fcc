module lesson01;

/*
 * This code was created by Jeff Molofee '99 
 * (ported to Linux/SDL by Ti Leggett '01)
 * (ported to fcc by feep '10)
 *
 * If you've found this code useful, please let me know.
 *
 * Visit Jeff at http://nehe.gamedev.net/
 * 
 * or for port-specific comments, questions, bugreports etc. 
 * email to leggett@eecs.tulane.edu
 */

import c.stdio, c.stdlib, c.SDL.SDL;
import opengl;

pragma(lib, "SDL");

alias SCREEN_WIDTH = 640, SCREEN_HEIGHT = 480;
alias SCREEN_BPP = 16;

SDL_Surface* surface;

void quit(int code) {
  SDL_Quit();
  exit(code);
}

void resizeWindow(int width, height) mode GL {
  if !height height = 1;
  auto ratio = width * 1.0 / height;
  Viewport(0, 0, width, height);
  MatrixMode PROJECTION;
  LoadIdentity();
  gluPerspective(45.0, ratio, 0.1, 100);
  MatrixMode MODELVIEW;
  LoadIdentity();
}

void handleKeyPress(SDL_keysym* keysym )
{
  if (keysym.sym == SDLK_ESCAPE) quit(0);
  if (keysym.sym == SDLK_F1) SDL_WM_ToggleFullScreen(surface);
}

void initGL() mode GL {
  ShadeModel SMOOTH;
  ClearColor(0, 0, 0, 0);
  ClearDepth(1);
  Enable DEPTH_TEST;
  DepthFunc LEQUAL;
  Hint(PERSPECTIVE_CORRECTION_HINT, NICEST);
}

context timing {
  int t0, frames;
}

void drawGLScene() mode GL {
  Clear (COLOR_BUFFER_BIT | DEPTH_BUFFER_BIT);
  LoadIdentity();
  SDL_GL_SwapBuffers();
  timing.frames++;
  auto t = SDL_GetTicks();
  if (t - timing.t0 >= 5000) using timing {
    auto seconds = (t - t0) / 1000.0;
    auto fps = frames / seconds;
    writeln("$frames frames in $seconds seconds = $fps fps. ");
    t0 = t;
    frames = 0;
  }
}

char[] toString(char* p) {
  return p[0..strlen(p)];
}

int main(int argc, char** argv) prefix SDL_ {
  Init (INIT_VIDEO);
  auto videoFlags = OPENGL | GL_DOUBLEBUFFER | HWPALETTE | RESIZABLE | HWSURFACE | HWACCEL;
  GL_SetAttribute(GL_DOUBLEBUFFER, 1);
  surface = SetVideoMode (SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_BPP, videoFlags);
  if (!surface) {
    writeln("Video mode set failed: $(toString(SDL_GetError()))");
    quit(1);
  }
  initGL();
  resizeWindow(SCREEN_WIDTH, SCREEN_HEIGHT);
  bool done;
  while !done {
    while PollEvent &SDL_Event ev {
      if (ev.type == VIDEORESIZE) {
        surface = SetVideoMode(ev.resize.w, ev.resize.h, 16, videoFlags);
        resizeWindow(ev.resize.w, ev.resize.h);
      }
      if (ev.type == KEYDOWN) {
        handleKeyPress(&ev.key.keysym);
      }
      if (ev.type == QUIT) {
        done = true;
      }
    }
    drawGLScene();
  }
  quit(0);
  return 0;
}
